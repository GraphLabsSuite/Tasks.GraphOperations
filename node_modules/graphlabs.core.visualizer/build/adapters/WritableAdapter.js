"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReadableAdapter_1 = require("./ReadableAdapter");
var graphlabs_core_graphs_1 = require("graphlabs.core.graphs");
var __1 = require("..");
var WritableAdapter = /** @class */ (function (_super) {
    __extends(WritableAdapter, _super);
    function WritableAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WritableAdapter.prototype.numberOfSelectedVertices = function () {
        var circles = document.querySelectorAll('circle[style~="rgb(255,"]');
        console.log(circles);
        return circles.length;
    };
    WritableAdapter.prototype.numberOfSelectedEdges = function () {
        var lines = document.querySelectorAll('line[style~="green;"]');
        console.log(lines);
        return lines.length;
    };
    WritableAdapter.prototype.addVertex = function () {
        _super.prototype.addVertex.call(this);
        var vertex;
        var isRepeated;
        // добаление вершины (именование вручную)
        if (this.props.vertexNaming == true) {
            var vertName = prompt('Enter the name of the vertex', '');
            if (vertName !== '' && vertName !== null) {
                if (vertName !== '_') {
                    vertex = new graphlabs_core_graphs_1.Vertex(vertName);
                }
                else {
                    vertex = new graphlabs_core_graphs_1.Vertex(vertName + this.graphVisualizer.geometric.vertices.length);
                }
            }
            else {
                return;
            }
        }
        else { //добавление вершины (именование автоматическое)
            if (this.graphVisualizer.geometric.vertices.length != 0) {
                var vertNumbers = [];
                for (var i = 0; i < this.graphVisualizer.geometric.vertices.length; i++) {
                    vertNumbers[i] = Number(this.graphVisualizer.geometric.vertices[i].vertex.name);
                }
                var maxNum = Math.max.apply(null, vertNumbers);
                vertex = new graphlabs_core_graphs_1.Vertex((maxNum + 1).toString());
            }
            else {
                vertex = new graphlabs_core_graphs_1.Vertex('0');
            }
        }
        // проверка вершины на уникальность
        if (this.props.graph.vertices.some(function (v) { return v.name === vertex.name; })) {
            isRepeated = true;
        }
        // добавление вершины в модель, геом. граф и в svg
        if (isRepeated !== true) {
            this.props.graph.addVertex(vertex);
            this.graphVisualizer.geometric.vertices.push(new __1.GeometricVertex(vertex));
            this.addVertexToSVG(new __1.GeometricVertex(vertex));
            this.updateSvg();
        }
    };
    WritableAdapter.prototype.addEdge = function () {
        console.log(this.graphVisualizer);
        _super.prototype.addEdge.call(this);
        console.log('vert1' + this.vertexOne);
        console.log('vert2' + this.vertexTwo);
        var edge;
        if (this.vertexOne.name != '' && this.vertexTwo.name != '' && this.numberOfSelectedVertices() === 2) {
            // добавление ребра (именование вручную)
            if (this.props.edgeNaming === true) {
                var edgeName = prompt('Enter the name of the edge', '');
                if (edgeName !== '' && edgeName !== null) {
                    // if (this.vertexOne.name != '' && this.vertexTwo.name != '') {
                    edge = new graphlabs_core_graphs_1.Edge(new graphlabs_core_graphs_1.Vertex(this.vertexOne.name), new graphlabs_core_graphs_1.Vertex(this.vertexTwo.name), edgeName);
                    /* this.props.graph.addEdge(edge);
                     this.graphVisualizer.geometric.edges.push(new GeometricEdge(edge));
                     this.addEdgeToSVG(new GeometricEdge(edge));
                     this.updateSvg();*/
                    // }
                }
                else {
                    return;
                }
            }
            else {
                // if (this.vertexOne.name != '' && this.vertexTwo.name != '') {
                /* let isRepeated: boolean;
                 for (let i = 0; i < this.props.graph.edges.length; i++) {
                     if (this.props.graph.edges[i].vertexOne.name == this.vertexOne.name && this.props.graph.edges[i].vertexTwo.name == this.vertexTwo.name
                         || this.props.graph.edges[i].vertexOne.name == this.vertexTwo.name && this.props.graph.edges[i].vertexTwo.name == this.vertexOne.name) {
                         isRepeated = true;
                     }
                 }
                 if (isRepeated == true) {
                     console.log("Repeated item!");
                 } else { */
                // добавление ребра (автоматическое именование)
                if (this.props.namedEdges == true) {
                    if (this.graphVisualizer.geometric.edges.length != 0) {
                        var edgeNumbers = [];
                        for (var i = 0; i < this.graphVisualizer.geometric.edges.length; i++) {
                            edgeNumbers[i] = Number(this.graphVisualizer.geometric.edges[i].edge.name);
                        }
                        var maxNum = Math.max.apply(null, edgeNumbers);
                        edge = new graphlabs_core_graphs_1.Edge(new graphlabs_core_graphs_1.Vertex(this.vertexOne.name), new graphlabs_core_graphs_1.Vertex(this.vertexTwo.name), (maxNum + 1).toString());
                    }
                    else {
                        edge = new graphlabs_core_graphs_1.Edge(new graphlabs_core_graphs_1.Vertex(this.vertexOne.name), new graphlabs_core_graphs_1.Vertex(this.vertexTwo.name), '0');
                    }
                }
                else { // добавленеи неименованных ребер
                    edge = new graphlabs_core_graphs_1.Edge(new graphlabs_core_graphs_1.Vertex(this.vertexOne.name), new graphlabs_core_graphs_1.Vertex(this.vertexTwo.name));
                }
                /*console.log(edge);
                this.props.graph.addEdge(edge);
                this.graphVisualizer.geometric.edges.push(new GeometricEdge(edge));
                this.addEdgeToSVG(new GeometricEdge(edge));
                this.updateSvg();*/
                // }
                // }
            }
            // проверка ребра на уникальность (нет ребер с таким же именем и нет ребер между данными двумя вершинами)
            var isRepeated2 = void 0;
            if (this.props.graph.edges.some(function (e) { return e.name === edge.name
                || (e.vertexOne.name === edge.vertexOne.name && e.vertexTwo.name === edge.vertexTwo.name)
                || (e.vertexOne.name === edge.vertexTwo.name && e.vertexTwo.name === edge.vertexOne.name); })) {
                isRepeated2 = true;
                console.log('Repeated edge!');
            }
            // добавление ребра в модель, геом.граф и в svg
            if (isRepeated2 !== true) {
                console.log(edge);
                this.props.graph.addEdge(edge);
                this.graphVisualizer.geometric.edges.push(new __1.GeometricEdge(edge));
                this.addEdgeToSVG(new __1.GeometricEdge(edge));
                this.updateSvg();
            }
        }
        else {
            alert('Для добавления ребра необходимо выбрать две вершины!');
        }
        this.vertexOne.rename('');
        this.vertexTwo.rename('');
    };
    WritableAdapter.prototype.removeVertex = function () {
        _super.prototype.removeVertex.call(this);
        console.log('vert1' + this.vertexOne);
        console.log('vert2' + this.vertexTwo);
        var edges = [];
        if ((this.vertexOne.name != '' || this.vertexTwo.name != '') && this.numberOfSelectedVertices() === 1) {
            for (var i = 0; i < this.graphVisualizer.geometric.vertices.length; i++) {
                if (this.graphVisualizer.geometric.vertices[i].label == this.vertexOne.name) {
                    console.log(this.props.graph.vertices[i].name);
                    for (var j = 0; j < this.graphVisualizer.geometric.edges.length; j++) {
                        if (this.graphVisualizer.geometric.edges[j].edge.vertexOne.name == this.vertexOne.name || this.graphVisualizer.geometric.edges[j].edge.vertexTwo.name == this.vertexOne.name) {
                            var elem = this.graphVisualizer.geometric.edges[j];
                            edges.push(elem);
                        }
                    }
                    if (edges.length != 0) {
                        for (var k = 0; k < edges.length; k++) {
                            this.removeEdgeFromSVG(edges[k]);
                            this.props.graph.removeEdge(edges[k].edge);
                            this.graphVisualizer.geometric.edges.splice(this.graphVisualizer.geometric.edges.indexOf(edges[k], 0), 1);
                            this.updateSvg();
                        }
                    }
                    this.removeVertexFromSVG(this.graphVisualizer.geometric.vertices[i]);
                    this.props.graph.removeVertex(this.props.graph.vertices[i]);
                    this.graphVisualizer.geometric.vertices.splice(i, 1);
                    this.updateSvg();
                }
            }
            this.vertexOne.rename('');
            this.vertexTwo.rename('');
        }
        else {
            alert('Необходимо выбрать одну и только одну вершину!');
        }
    };
    WritableAdapter.prototype.removeEdge = function () {
        _super.prototype.removeEdge.call(this);
        if (this.numberOfSelectedEdges() === 1) {
            var elem = void 0;
            for (var i = 0; i < this.props.graph.edges.length; i++) {
                if (this.vertexOne.name != '' && this.vertexTwo.name != '') {
                    if (this.props.graph.edges[i].vertexOne.name == this.vertexOne.name && this.props.graph.edges[i].vertexTwo.name == this.vertexTwo.name
                        || this.props.graph.edges[i].vertexOne.name == this.vertexTwo.name && this.props.graph.edges[i].vertexTwo.name == this.vertexOne.name) {
                        elem = this.graphVisualizer.geometric.edges[i];
                        this.removeEdgeFromSVG(elem);
                        this.props.graph.removeEdge(this.props.graph.edges[i]);
                        this.graphVisualizer.geometric.edges.splice(i, 1);
                        this.updateSvg();
                    }
                }
            }
        }
        else {
            alert('Необходимо выбрать одно и только одно ребро!');
        }
        this.updateSvg();
        this.vertexOne.rename('');
        this.vertexTwo.rename('');
    };
    return WritableAdapter;
}(ReadableAdapter_1.ReadableAdapter));
exports.WritableAdapter = WritableAdapter;
//# sourceMappingURL=WritableAdapter.js.map