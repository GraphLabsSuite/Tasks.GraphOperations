"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UndirectedEdge_1 = require("./UndirectedEdge");
var Graph_1 = require("./Graph");
var MinDSEvaluator_1 = require("../algorithms/MinDSEvaluator");
var SccBuilder_1 = require("../algorithms/SccBuilder");
/**
 * @classdesc
 * Undirected edge
 */
var UndirectedGraph = /** @class */ (function (_super) {
    __extends(UndirectedGraph, _super);
    /**
     * @constructor
     */
    function UndirectedGraph() {
        return _super.call(this, false) || this;
    }
    /**
     * @override
     * Gets the edge by vertices incident to it
     * @param vertexOne
     * @param vertexTwo
     * @returns {DirectedEdge}
     */
    UndirectedGraph.prototype.getEdge = function (vertexOne, vertexTwo) {
        return this.edges.filter(function (a) { return a.vertexTwo.equals(vertexTwo) && a.vertexOne.equals(vertexOne); });
    };
    UndirectedGraph.prototype.buildSCC = function () {
        return SccBuilder_1.SccBuilder.findComponents(this);
    };
    /**
     * Returns the minimal dominating sets of the graph
     * @returns {IVertex[][]}
     */
    UndirectedGraph.prototype.buildMDS = function () {
        var evaluator = new MinDSEvaluator_1.MinDSEvaluator(this);
        evaluator.evaluate(this, false);
        return evaluator._minDs;
    };
    /**
     * @override
     * Returns the copy of the graph
     * @returns {UndirectedGraph}
     */
    UndirectedGraph.prototype.clone = function () {
        var clone = new UndirectedGraph();
        this.vertices.forEach(function (v) { return clone.addVertex(v.clone()); });
        var _loop_1 = function (edge) {
            var v1 = clone.vertices.filter(function (v) { return edge.vertexOne.equals(v); })[0]; //First
            var v2 = clone.vertices.filter(function (v) { return edge.vertexTwo.equals(v); })[0];
            clone.addEdge(new UndirectedEdge_1.UndirectedEdge(v1, v2));
        };
        for (var _i = 0, _a = this.edges; _i < _a.length; _i++) {
            var edge = _a[_i];
            _loop_1(edge);
        }
        return clone;
    };
    return UndirectedGraph;
}(Graph_1.Graph));
exports.UndirectedGraph = UndirectedGraph;
//# sourceMappingURL=UndirectedGraph.js.map