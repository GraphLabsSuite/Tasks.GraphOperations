{"ast":null,"code":"import { Graph } from \"graphlabs.core.graphs\";\nlet graphModel = new Graph();\nlet init;\n\ninit = function (graph) {\n  graphModel = graph;\n};\n\nlet graphModel1 = new Graph();\nlet init1;\n\ninit1 = function (graph) {\n  graphModel1 = graph;\n};\n\nlet graphModel2 = new Graph();\nlet init2;\n\ninit2 = function (graph) {\n  graphModel2 = graph;\n};\n\nlet graphModelres = new Graph();\nlet initres;\n\ninitres = function (graph) {\n  graphModelres = graph;\n};\n\nexport { init1, graphModel1, init2, graphModel2, initres, graphModelres, init, graphModel };","map":{"version":3,"sources":["/home/ilya/UIR/Tasks.GraphOperations/src/ForMyGraphModel.ts"],"names":["Graph","graphModel","init","graph","graphModel1","init1","graphModel2","init2","graphModelres","initres"],"mappings":"AAAA,SAAiCA,KAAjC,QAA8C,uBAA9C;AAEA,IAAIC,UAAmC,GAAG,IAAID,KAAJ,EAA1C;AACA,IAAIE,IAAJ;;AACAA,IAAI,GAAG,UAAUC,KAAV,EAAyC;AAC5CF,EAAAA,UAAU,GAAGE,KAAb;AACH,CAFD;;AAIA,IAAIC,WAAoC,GAAG,IAAIJ,KAAJ,EAA3C;AACA,IAAIK,KAAJ;;AACAA,KAAK,GAAG,UAAUF,KAAV,EAAyC;AAC7CC,EAAAA,WAAW,GAAGD,KAAd;AACH,CAFD;;AAIA,IAAIG,WAAoC,GAAG,IAAIN,KAAJ,EAA3C;AACA,IAAIO,KAAJ;;AACAA,KAAK,GAAG,UAAUJ,KAAV,EAAyC;AAC7CG,EAAAA,WAAW,GAAGH,KAAd;AACH,CAFD;;AAIA,IAAIK,aAAsC,GAAG,IAAIR,KAAJ,EAA7C;AACA,IAAIS,OAAJ;;AACAA,OAAO,GAAG,UAAUN,KAAV,EAAyC;AAC/CK,EAAAA,aAAa,GAAGL,KAAhB;AACH,CAFD;;AAIA,SAASE,KAAT,EAAgBD,WAAhB,EAA6BG,KAA7B,EAAoCD,WAApC,EAAiDG,OAAjD,EAA0DD,aAA1D,EAAyEN,IAAzE,EAA+ED,UAA/E","sourcesContent":["import { IGraph, IVertex, IEdge, Graph } from \"graphlabs.core.graphs\";\n\nlet graphModel:  IGraph<IVertex, IEdge> = new Graph() as unknown as IGraph<IVertex, IEdge>;\nlet init:(graph: IGraph<IVertex, IEdge>) => void;\ninit = function (graph: IGraph<IVertex, IEdge>) {\n    graphModel = graph;\n}\n\nlet graphModel1:  IGraph<IVertex, IEdge> = new Graph() as unknown as IGraph<IVertex, IEdge>;\nlet init1:(graph: IGraph<IVertex, IEdge>) => void;\ninit1 = function (graph: IGraph<IVertex, IEdge>) {\n    graphModel1 = graph;\n}\n\nlet graphModel2:  IGraph<IVertex, IEdge> = new Graph() as unknown as IGraph<IVertex, IEdge>;\nlet init2:(graph: IGraph<IVertex, IEdge>) => void;\ninit2 = function (graph: IGraph<IVertex, IEdge>) {\n    graphModel2 = graph;\n}\n\nlet graphModelres:  IGraph<IVertex, IEdge> = new Graph() as unknown as IGraph<IVertex, IEdge>;\nlet initres:(graph: IGraph<IVertex, IEdge>) => void;\ninitres = function (graph: IGraph<IVertex, IEdge>) {\n    graphModelres = graph;\n}\n\nexport { init1, graphModel1, init2, graphModel2, initres, graphModelres, init, graphModel };"]},"metadata":{},"sourceType":"module"}