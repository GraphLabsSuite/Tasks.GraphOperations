"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Graph_1 = require("./Graph");
var DirectedEdge_1 = require("./DirectedEdge");
var SccBuilder_1 = require("../algorithms/SccBuilder");
/**
 * Directed graph
 * @classdes
 */
var DirectedGraph = /** @class */ (function (_super) {
    __extends(DirectedGraph, _super);
    /**
     * @constructor
     */
    function DirectedGraph() {
        return _super.call(this, true) || this;
    }
    /**
     * Gets the direct edge by two vertices incident to it
     * @param vertexOne
     * @param vertexTwo
     * @returns {DirectedEdge}
     */
    DirectedGraph.prototype.getEdge = function (vertexOne, vertexTwo) {
        return this.edges.filter(function (a) { return a.vertexTwo.equals(vertexTwo) && a.vertexOne.equals(vertexOne); });
    };
    DirectedGraph.prototype.buildSCC = function () {
        return SccBuilder_1.SccBuilder.findComponents(this);
    };
    /**
     * Returns the copy of the graph
     * @returns {DirectedGraph}
     */
    DirectedGraph.prototype.clone = function () {
        var clone = new DirectedGraph();
        this.vertices.forEach(function (v) { return clone.addVertex(v.clone()); });
        for (var _i = 0, _a = this.edges; _i < _a.length; _i++) {
            var edge = _a[_i];
            var v1 = clone.vertices.filter(edge.vertexOne.equals)[0]; //Single?
            var v2 = clone.vertices.filter(edge.vertexTwo.equals)[0];
            clone.addEdge(new DirectedEdge_1.DirectedEdge(v1, v2));
        }
        return clone;
    };
    return DirectedGraph;
}(Graph_1.Graph));
exports.DirectedGraph = DirectedGraph;
//# sourceMappingURL=DirectedGraph.js.map