interface ITreeNode {
    label: string;
    weight: number;
    position: {
        x: number;
        y: number;
    };
    children: TreeNode[];
}
export default class TreeNode {
    static getInstance(node: ITreeNode): TreeNode;
    private static lastId;
    label: string;
    weight: number;
    private position;
    children: TreeNode[];
    private readonly id;
    private constructor();
    getId(): number;
    getLabel(): string;
    getPosition(): {
        x: number;
        y: number;
    };
    setPosition(pos: {
        x: number;
        y: number;
    }): void;
    addLeaf(parentId: number, label: string, weigth: number): void;
    removeLeaf(nodeId: number): void;
    getNodeById(id: number): TreeNode;
    getNodeList(): TreeNode[];
    deepNodeSearch(predicate: (node: TreeNode) => boolean): TreeNode | void;
}
export {};
