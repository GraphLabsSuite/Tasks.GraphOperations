"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Vertex_1 = require("./Vertex");
var DirectedWeightedEdge_1 = require("./DirectedWeightedEdge");
var Graph_1 = require("./Graph");
var DirectedWeightedGraph = /** @class */ (function (_super) {
    __extends(DirectedWeightedGraph, _super);
    /**
     * @constructor
     */
    function DirectedWeightedGraph() {
        return _super.call(this, true) || this;
    }
    /**
     * @static
     * Static builder for the directed weighted graph
     * @param verticesNumber
     * @return {DirectedWeightedGraph}
     */
    DirectedWeightedGraph.createEmpty = function (verticesNumber) {
        var newGraph = new DirectedWeightedGraph();
        for (var i = 0; i < verticesNumber; ++i)
            newGraph.addVertex(new Vertex_1.Vertex(i.toString(verticesNumber)));
        return newGraph;
    };
    Object.defineProperty(DirectedWeightedGraph.prototype, "isDirected", {
        /**
         * @override
         * @property
         * @public
         * Shows the graph is directed
         * @return {boolean}
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectedWeightedGraph.prototype, "allowMultipleEdges", {
        /**
         * @override
         * @property
         * @public
         * Shows the graph is not able to have multiple edges
         * @return {boolean}
         */
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @public
     * Gets the edge by two vertices incident to it
     * @param vertexOne
     * @param vertexTwo
     */
    DirectedWeightedGraph.prototype.getEdge = function (vertexOne, vertexTwo) {
        return this.edges.filter(function (a) { return a.vertexTwo.equals(vertexTwo) && a.vertexOne.equals(vertexOne); });
        //TODO: why IWeightedEdge is not compatible to DirectedWeightedEdge?
    };
    /**
     * @override
     * Deep graph-cloning
     * @returns {DirectedWeightedGraph}
     */
    DirectedWeightedGraph.prototype.clone = function () {
        var clone = new DirectedWeightedGraph();
        this.vertices.forEach(function (v) { return clone.addVertex(new Vertex_1.Vertex(v.name)); });
        this.edges.forEach(function (e) {
            var dwe = e;
            var v1 = clone.vertices.filter(function (v) { return v.equals(e.vertexOne); })[0]; //Single
            var v2 = clone.vertices.filter(function (v) { return v.equals(e.vertexTwo); })[0]; //First
            clone.addEdge(new DirectedWeightedEdge_1.DirectedWeightedEdge(v1, v2, dwe.weight));
        });
        return clone;
    };
    return DirectedWeightedGraph;
}(Graph_1.Graph));
exports.DirectedWeightedGraph = DirectedWeightedGraph;
//# sourceMappingURL=DirectedWeightedGraph.js.map