import { IVertex } from "../types/IVertex";
import { IGraph } from "../types/IGraph";
import { IEdge } from "../types/IEdge";
import { GraphID } from "../util/GraphID";
/**
 * @classdesc
 * The vertex implementation of IVertex interface
 */
export declare class Vertex implements IVertex {
    /**
     * @property
     * @private
     * Reference to the graph the vertex belongs to
     */
    private _graphReference?;
    /**
     * @property
     * @private
     * The identifier of the vertex
     */
    private _id;
    /**
     * @property
     * @private
     * The name of the vertex shown visually
     */
    private _name;
    /**
     * @property
     * @private
     * The additional label for extra information (i.e. weight)
     */
    private _label;
    /**
   * @property
   * @private
   * The additional attribute for information of the vertex wave position
   */
    private _wave;
    /**
     * @property
     * @public
     * Getter for the _id field
     * @returns {number}
     */
    get id(): GraphID;
    /**
     * @property
     * @public
     * Getter for _name field
     * @returns {string}
     */
    get name(): string;
    /**
     * @property
     * @private
     * Private emulated setter for _name field
     * @param theName
     */
    private setName;
    /**
     * @property
     * @public
     * Getter for _label field
     * @returns {string}
     */
    get label(): string;
    /**
     * @property
     * @public
     * Getter for _wave field
     * @returns {string}
     */
    get wave(): string;
    /**
     * @property
     * @public
     * Setter for _label field
     * @param theLabel
     */
    set label(theLabel: string);
    /**
    * @property
    * @public
    * Setter for _label field
    * @param theLabel
    */
    set wave(theWave: string);
    /**
     * @constructor
     * @param name
     * @param graph
     */
    constructor(name: string, graph?: IGraph<IVertex, IEdge>);
    /**
     * @public
     * Allows to change the name field of the vertex
     * @param newName
     */
    rename(newName: string): void;
    /**
     * @public
     * Checks whether the edge is incident to the vertex
     * @param edge
     */
    isIncident(edge: IEdge): boolean;
    /**
     * @public
     * Checks whether the vertex is adjacent to the given one
     * @param vertex
     */
    isAdjacent(graph: IGraph<IVertex, IEdge>, vertex: IVertex): boolean;
    /**
     * @public
     * Return the array of incident edges for the vertex
     * @param graph
     */
    arrOfIncidentEdges(graph: IGraph<IVertex, IEdge>): IEdge[];
    /**
     * @public
     * Return the array of adjacent vertices for the vertex
     * @param graph
     */
    arrOfAdjacentVertices(graph: IGraph<IVertex, IEdge>): IVertex[];
    /**
     * @public
     * Returns string representation of the vertex
     * @returns {string}
     */
    toString(): string;
    /**
     * @public
     * Deep vertex-cloning
     * @returns {Vertex}
     */
    clone(): Vertex;
    /**
     * @public
     * Calculates the hash function of the vertex
     * @returns {string}
     */
    hash(): string;
    /**
     * @public
     * Checks whether the second vertex equals with this one
     * @param vertex
     * @returns {boolean}
     */
    equals(vertex: IVertex): boolean;
}
