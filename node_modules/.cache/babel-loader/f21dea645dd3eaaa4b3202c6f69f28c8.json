{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Vertex_1 = require(\"../main/Vertex\");\n\nvar Edge_1 = require(\"../main/Edge\");\n\nvar Graph_1 = require(\"../main/Graph\");\n/**\r\n * Graph generator\r\n */\n\n\nvar GraphGenerator =\n/** @class */\nfunction () {\n  function GraphGenerator() {}\n\n  GraphGenerator.generateVertexNumber = function (max) {\n    return Math.floor(Math.random() * max) + 1;\n  };\n\n  GraphGenerator.generateEdgesNumber = function (verticeNumber) {\n    return Math.floor(Math.random() * verticeNumber * (verticeNumber - 1) / 2) + 1;\n  };\n  /**\r\n   * Returns the generated graph with exact vertex number\r\n   * @param verticeNumber\r\n   * @returns {IGraph}\r\n   */\n\n\n  GraphGenerator.generate = function (verticeNumber) {\n    if (verticeNumber == null) {\n      var verticeNumberGen = GraphGenerator.generateVertexNumber(10);\n      return GraphGenerator.generate(verticeNumberGen);\n    }\n\n    var graph = new Graph_1.Graph();\n\n    for (var i = 0; i < verticeNumber; i++) {\n      graph.addVertex(new Vertex_1.Vertex(i.toString(), graph));\n    }\n\n    if (verticeNumber > 2) {\n      var edgeNumber = GraphGenerator.generateVertexNumber(graph.vertices.length);\n\n      for (var i = 0; i < edgeNumber; i++) {\n        var vertexOne = undefined;\n        var vertexTwo = undefined;\n        var flag1 = void 0;\n        var flag2 = void 0;\n        var flag3 = void 0;\n        var flag4 = void 0;\n        var flag5 = void 0;\n\n        do {\n          var vertexOneNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);\n          var vertexTwoNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);\n          vertexOne = graph.getVertex(vertexOneNumber.toString())[0];\n          vertexTwo = graph.getVertex(vertexTwoNumber.toString())[0];\n          flag1 = vertexOne === undefined;\n          flag2 = vertexTwo === undefined;\n          flag3 = vertexOne == vertexTwo;\n          flag4 = graph.getEdge(vertexOne, vertexTwo).length != 0;\n          flag5 = graph.getEdge(vertexTwo, vertexOne).length != 0;\n        } while (flag1 || flag2 || flag3 || flag4 || flag5);\n\n        graph.addEdge(new Edge_1.Edge(vertexOne, vertexTwo));\n      }\n    } else if (verticeNumber === 2) {\n      var validator = this.generateVertexNumber(20);\n      if (validator % 2 == 0) graph.addEdge(new Edge_1.Edge(graph.vertices[0], graph.vertices[1]));\n    } else if (verticeNumber === 1) {// pass\n    } else if (verticeNumber === 0) {// pass\n    }\n\n    return graph;\n  };\n\n  GraphGenerator.generateUndirectedGraph = function () {\n    return GraphGenerator.generate();\n  };\n\n  GraphGenerator.generateDirectedGraph = function () {\n    return GraphGenerator.generate();\n  };\n\n  return GraphGenerator;\n}();\n\nexports.GraphGenerator = GraphGenerator;","map":{"version":3,"sources":["../../src/helpers/GraphGenerator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Vertex_1 = require(\"../main/Vertex\");\r\nvar Edge_1 = require(\"../main/Edge\");\r\nvar Graph_1 = require(\"../main/Graph\");\r\n/**\r\n * Graph generator\r\n */\r\nvar GraphGenerator = /** @class */ (function () {\r\n    function GraphGenerator() {\r\n    }\r\n    GraphGenerator.generateVertexNumber = function (max) {\r\n        return Math.floor(Math.random() * max) + 1;\r\n    };\r\n    GraphGenerator.generateEdgesNumber = function (verticeNumber) {\r\n        return Math.floor(Math.random() * verticeNumber * (verticeNumber - 1) / 2) + 1;\r\n    };\r\n    /**\r\n     * Returns the generated graph with exact vertex number\r\n     * @param verticeNumber\r\n     * @returns {IGraph}\r\n     */\r\n    GraphGenerator.generate = function (verticeNumber) {\r\n        if (verticeNumber == null) {\r\n            var verticeNumberGen = GraphGenerator.generateVertexNumber(10);\r\n            return GraphGenerator.generate(verticeNumberGen);\r\n        }\r\n        var graph = new Graph_1.Graph();\r\n        for (var i = 0; i < verticeNumber; i++) {\r\n            graph.addVertex(new Vertex_1.Vertex(i.toString(), graph));\r\n        }\r\n        if (verticeNumber > 2) {\r\n            var edgeNumber = GraphGenerator.generateVertexNumber(graph.vertices.length);\r\n            for (var i = 0; i < edgeNumber; i++) {\r\n                var vertexOne = undefined;\r\n                var vertexTwo = undefined;\r\n                var flag1 = void 0;\r\n                var flag2 = void 0;\r\n                var flag3 = void 0;\r\n                var flag4 = void 0;\r\n                var flag5 = void 0;\r\n                do {\r\n                    var vertexOneNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);\r\n                    var vertexTwoNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);\r\n                    vertexOne = graph.getVertex(vertexOneNumber.toString())[0];\r\n                    vertexTwo = graph.getVertex(vertexTwoNumber.toString())[0];\r\n                    flag1 = vertexOne === undefined;\r\n                    flag2 = vertexTwo === undefined;\r\n                    flag3 = vertexOne == vertexTwo;\r\n                    flag4 = graph.getEdge(vertexOne, vertexTwo).length != 0;\r\n                    flag5 = graph.getEdge(vertexTwo, vertexOne).length != 0;\r\n                } while (flag1 || flag2\r\n                    || flag3\r\n                    || flag4\r\n                    || flag5);\r\n                graph.addEdge(new Edge_1.Edge(vertexOne, vertexTwo));\r\n            }\r\n        }\r\n        else if (verticeNumber === 2) {\r\n            var validator = this.generateVertexNumber(20);\r\n            if (validator % 2 == 0)\r\n                graph.addEdge(new Edge_1.Edge(graph.vertices[0], graph.vertices[1]));\r\n        }\r\n        else if (verticeNumber === 1) {\r\n            // pass\r\n        }\r\n        else if (verticeNumber === 0) {\r\n            // pass\r\n        }\r\n        return graph;\r\n    };\r\n    GraphGenerator.generateUndirectedGraph = function () {\r\n        return GraphGenerator.generate();\r\n    };\r\n    GraphGenerator.generateDirectedGraph = function () {\r\n        return GraphGenerator.generate();\r\n    };\r\n    return GraphGenerator;\r\n}());\r\nexports.GraphGenerator = GraphGenerator;\r\n//# sourceMappingURL=GraphGenerator.js.map"]},"metadata":{},"sourceType":"script"}