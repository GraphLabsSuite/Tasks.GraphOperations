import { ITreeNode } from "../types/ITreeNode";
/**
 * @classdesc
 * TreeNode<T> implementation of the ITreeNode interface
 */
export declare class TreeNode<T> implements ITreeNode<T> {
    /**
     * @property
     * @private
     * Max identifier of list of nodes
     */
    static lastId: number;
    /**
     * @property
     * @public
     * MNode's identifier
     */
    id: number;
    /**
     * @property
     * @public
     * Node's parent identifier
     */
    parentId: number;
    /**
     * @property
     * @public
     * Node's label
     */
    label: string;
    /**
     * @property
     * @public
     * Node's weight
     */
    weight: T;
    /**
     * @property
     * @public
     * Node's position on canvas
     */
    position: {
        x: number;
        y: number;
    };
    /**
     * @property
     * @public
     * The list of node's children
     */
    children: TreeNode<T>[];
    /**
     * @constructor
     */
    constructor(label: string, weight: T);
    /**
     * @public
     * Gets the node's unique identifier
     */
    getId(): number;
    /**
     * @public
     * Gets the node's label
     */
    getLabel(): string;
    /**
     * @public
     * Gets the node's position on canvas
     * @returns {number; number}
     */
    getPosition(): {
        x: number;
        y: number;
    };
    /**
     * @public
     * Sets the new node's position
     * @param pos
     */
    setPosition(pos: {
        x: number;
        y: number;
    }): void;
    /**
     * @public
     * Adds the new node's child
     * @param parentId
     * @param label
     * @param weight
     * @param position
     */
    addChild(parentId: number, label: string, weight: T): void;
    /**
     * @public
     * Removes node
     * @param nodeId
     */
    removeNode(nodeId: number): void;
    /**
     * @public
     * Finds node by id
     * @param nodeId
     * @returns {TreeNode<T>}
     */
    getNodeById(nodeId: number): TreeNode<T>;
    /**
     * @public
     * Gets all nodes
     * @returns {TreeNode<T>[]}
     */
    getNodeList(): TreeNode<T>[];
    /**
     * @public
     * Finds node by condition
     * @param predicate
     * @returns {TreeNode<T> | void}
     */
    deepNodeSearch(predicate: (node: TreeNode<T>) => boolean): TreeNode<T> | void;
}
