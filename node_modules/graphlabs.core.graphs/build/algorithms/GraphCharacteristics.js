"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var GraphCharacteristics = /** @class */ (function () {
    function GraphCharacteristics() {
    }
    /**
     * Get subgraph of graph
     * input: vertives
     */
    GraphCharacteristics.getSubgraph = function (subVertices, graph) {
        var subGraph = __1.Graph.createEmpty(0);
        subVertices.forEach(function (v) {
            var vertex = new __1.Vertex(v);
            subGraph.addVertex(vertex);
        });
        graph.edges.filter(function (e) { return e.vertexOne.name in subVertices
            && e.vertexTwo.name in subVertices; })
            .forEach(function (e) { return subGraph.addEdge(e); });
        return subGraph;
    };
    /**
     * Get neighbourhood
     */
    GraphCharacteristics.getNeighbourhood = function (vertex, graph) {
        var answer = graph.edges
            .reduce(function (accum, next) {
            return (next.vertexOne.name === vertex)
                ? accum.concat(next.vertexTwo)
                : (next.vertexTwo.name === vertex)
                    ? accum.concat(next.vertexOne)
                    : accum;
        }, [])
            .map(function (e) { return e.name; });
        return answer;
    };
    /**
     * Get neighbourhood
     */
    GraphCharacteristics.getNonNeighbourhood = function (vertex, graph) {
        var neighbours = GraphCharacteristics.getNeighbourhood(vertex, graph);
        neighbours.push(vertex);
        var answer = graph.vertices.reduce(function (accum, next) {
            return (next.name in neighbours) ?
                accum : accum.concat(next.name);
        }, []);
        return answer;
    };
    return GraphCharacteristics;
}());
exports.GraphCharacteristics = GraphCharacteristics;
//# sourceMappingURL=GraphCharacteristics.js.map