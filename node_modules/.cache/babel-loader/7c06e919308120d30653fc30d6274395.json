{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar VertexToJSONConverter_1 = require(\"./VertexToJSONConverter\");\n\nvar EdgeToJSONConverter_1 = require(\"./EdgeToJSONConverter\");\n\nvar DirectedWeightedGraph_1 = require(\"../main/DirectedWeightedGraph\");\n\nvar DirectedGraph_1 = require(\"../main/DirectedGraph\");\n\nvar UndirectedGraph_1 = require(\"../main/UndirectedGraph\");\n\nvar GraphToJSONConverter =\n/** @class */\nfunction () {\n  function GraphToJSONConverter() {}\n\n  GraphToJSONConverter.convert = function (graph) {\n    return {\n      isDirected: graph.isDirected,\n      weighted: graph instanceof DirectedWeightedGraph_1.DirectedWeightedGraph,\n      vertices: graph.vertices.map(function (v) {\n        return VertexToJSONConverter_1.VertexToJSONConverter.convert(v);\n      }),\n      edges: graph.edges.map(function (e) {\n        return EdgeToJSONConverter_1.EdgeToJSONConverter.convert(e);\n      })\n    };\n  };\n\n  GraphToJSONConverter.convertBack = function (graph) {\n    var result;\n\n    if (graph.isDirected) {\n      if (graph.weighted) {\n        result = new DirectedWeightedGraph_1.DirectedWeightedGraph();\n      } else {\n        result = new DirectedGraph_1.DirectedGraph();\n      }\n    } else {\n      result = new UndirectedGraph_1.UndirectedGraph();\n    }\n\n    graph.vertices.forEach(function (v) {\n      return result.addVertex(VertexToJSONConverter_1.VertexToJSONConverter.convertBack(v, result));\n    });\n    graph.edges.forEach(function (e) {\n      return result.addEdge(EdgeToJSONConverter_1.EdgeToJSONConverter.convertBack(e, result));\n    });\n    return result;\n  };\n\n  return GraphToJSONConverter;\n}();\n\nexports.GraphToJSONConverter = GraphToJSONConverter;","map":{"version":3,"sources":["../../src/serializers/GraphToJSONConverter.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAOA,IAAA,uBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA,CAyBC;;AAxBiB,EAAA,oBAAA,CAAA,OAAA,GAAd,UAAsB,KAAtB,EAAmD;AAC/C,WAAO;AACH,MAAA,UAAU,EAAE,KAAK,CAAC,UADf;AAEH,MAAA,QAAQ,EAAE,KAAK,YAAY,uBAAA,CAAA,qBAFxB;AAGH,MAAA,QAAQ,EAAE,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,UAAA,CAAA,EAAC;AAAI,eAAA,uBAAA,CAAA,qBAAA,CAAsB,OAAtB,CAAA,CAAA,CAAA;AAAgC,OAAxD,CAHP;AAIH,MAAA,KAAK,EAAE,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,UAAA,CAAA,EAAC;AAAI,eAAA,qBAAA,CAAA,mBAAA,CAAoB,OAApB,CAAA,CAAA,CAAA;AAA8B,OAAnD;AAJJ,KAAP;AAMH,GAPa;;AASA,EAAA,oBAAA,CAAA,WAAA,GAAd,UAA0B,KAA1B,EAA0C;AACtC,QAAI,MAAJ;;AACA,QAAI,KAAK,CAAC,UAAV,EAAsB;AAClB,UAAI,KAAK,CAAC,QAAV,EAAoB;AAChB,QAAA,MAAM,GAAG,IAAI,uBAAA,CAAA,qBAAJ,EAAT;AACH,OAFD,MAEO;AACH,QAAA,MAAM,GAAG,IAAI,eAAA,CAAA,aAAJ,EAAT;AACH;AACJ,KAND,MAMO;AACH,MAAA,MAAM,GAAG,IAAI,iBAAA,CAAA,eAAJ,EAAT;AACH;;AACD,IAAA,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,UAAA,CAAA,EAAC;AAAI,aAAA,MAAM,CAAC,SAAP,CAAiB,uBAAA,CAAA,qBAAA,CAAsB,WAAtB,CAAkC,CAAlC,EAAjB,MAAiB,CAAjB,CAAA;AAA8D,KAA1F;AACA,IAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,CAAoB,UAAA,CAAA,EAAC;AAAI,aAAA,MAAM,CAAC,OAAP,CAAe,qBAAA,CAAA,mBAAA,CAAoB,WAApB,CAAgC,CAAhC,EAAf,MAAe,CAAf,CAAA;AAA0D,KAAnF;AACA,WAAO,MAAP;AACH,GAda;;AAelB,SAAA,oBAAA;AAAC,CAzBD,EAAA;;AAAa,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar VertexToJSONConverter_1 = require(\"./VertexToJSONConverter\");\r\nvar EdgeToJSONConverter_1 = require(\"./EdgeToJSONConverter\");\r\nvar DirectedWeightedGraph_1 = require(\"../main/DirectedWeightedGraph\");\r\nvar DirectedGraph_1 = require(\"../main/DirectedGraph\");\r\nvar UndirectedGraph_1 = require(\"../main/UndirectedGraph\");\r\nvar GraphToJSONConverter = /** @class */ (function () {\r\n    function GraphToJSONConverter() {\r\n    }\r\n    GraphToJSONConverter.convert = function (graph) {\r\n        return {\r\n            isDirected: graph.isDirected,\r\n            weighted: graph instanceof DirectedWeightedGraph_1.DirectedWeightedGraph,\r\n            vertices: graph.vertices.map(function (v) { return VertexToJSONConverter_1.VertexToJSONConverter.convert(v); }),\r\n            edges: graph.edges.map(function (e) { return EdgeToJSONConverter_1.EdgeToJSONConverter.convert(e); })\r\n        };\r\n    };\r\n    GraphToJSONConverter.convertBack = function (graph) {\r\n        var result;\r\n        if (graph.isDirected) {\r\n            if (graph.weighted) {\r\n                result = new DirectedWeightedGraph_1.DirectedWeightedGraph();\r\n            }\r\n            else {\r\n                result = new DirectedGraph_1.DirectedGraph();\r\n            }\r\n        }\r\n        else {\r\n            result = new UndirectedGraph_1.UndirectedGraph();\r\n        }\r\n        graph.vertices.forEach(function (v) { return result.addVertex(VertexToJSONConverter_1.VertexToJSONConverter.convertBack(v, result)); });\r\n        graph.edges.forEach(function (e) { return result.addEdge(EdgeToJSONConverter_1.EdgeToJSONConverter.convertBack(e, result)); });\r\n        return result;\r\n    };\r\n    return GraphToJSONConverter;\r\n}());\r\nexports.GraphToJSONConverter = GraphToJSONConverter;\r\n//# sourceMappingURL=GraphToJSONConverter.js.map"]},"metadata":{},"sourceType":"script"}