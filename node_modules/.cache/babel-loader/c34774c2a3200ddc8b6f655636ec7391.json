{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar md5_1 = require(\"ts-md5/dist/md5\");\n\nvar GraphID_1 = require(\"../util/GraphID\");\n/**\r\n * @classdesc\r\n * The vertex implementation of IVertex interface\r\n */\n\n\nvar Vertex =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param name\r\n   * @param graph\r\n   */\n  function Vertex(name, graph) {\n    this._name = name;\n    this._id = GraphID_1.GraphID.generate();\n    this._label = \"\";\n    this._wave = \"\";\n    this._graphReference = graph;\n  }\n\n  Object.defineProperty(Vertex.prototype, \"id\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for the _id field\r\n     * @returns {number}\r\n     */\n    get: function () {\n      return this._id;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Vertex.prototype, \"name\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _name field\r\n     * @returns {string}\r\n     */\n    get: function () {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @property\r\n   * @private\r\n   * Private emulated setter for _name field\r\n   * @param theName\r\n   */\n\n  Vertex.prototype.setName = function (theName) {\n    this._name = theName;\n  };\n\n  Object.defineProperty(Vertex.prototype, \"label\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _label field\r\n     * @returns {string}\r\n     */\n    get: function () {\n      return this._label;\n    },\n\n    /**\r\n     * @property\r\n     * @public\r\n     * Setter for _label field\r\n     * @param theLabel\r\n     */\n    set: function (theLabel) {\n      this._label = theLabel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Vertex.prototype, \"wave\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _wave field\r\n     * @returns {string}\r\n     */\n    get: function () {\n      return this._wave;\n    },\n\n    /**\r\n    * @property\r\n    * @public\r\n    * Setter for _label field\r\n    * @param theLabel\r\n    */\n    set: function (theWave) {\n      this._wave = theWave;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @public\r\n   * Allows to change the name field of the vertex\r\n   * @param newName\r\n   */\n\n  Vertex.prototype.rename = function (newName) {\n    this.setName(newName);\n  };\n  /**\r\n   * @public\r\n   * Checks whether the edge is incident to the vertex\r\n   * @param edge\r\n   */\n\n\n  Vertex.prototype.isIncident = function (edge) {\n    return edge.vertexOne.name === this.name || edge.vertexTwo.name === this.name;\n  };\n  /**\r\n   * @public\r\n   * Checks whether the vertex is adjacent to the given one\r\n   * @param vertex\r\n   */\n\n\n  Vertex.prototype.isAdjacent = function (graph, vertex) {\n    var _this = this;\n\n    if (graph.edges.some(function (e) {\n      return vertex && _this && (e.vertexOne.name === _this.name && e.vertexTwo.name === vertex.name || e.vertexOne.name === vertex.name && e.vertexTwo.name === _this.name);\n    })) return true;else return false;\n  };\n  /**\r\n   * @public\r\n   * Return the array of incident edges for the vertex\r\n   * @param graph\r\n   */\n\n\n  Vertex.prototype.arrOfIncidentEdges = function (graph) {\n    var res = [];\n\n    for (var i = 0; i < graph.edges.length; i++) {\n      if (this.isIncident(graph.edges[i])) {\n        res.push(graph.edges[i]);\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * @public\r\n   * Return the array of adjacent vertices for the vertex\r\n   * @param graph\r\n   */\n\n\n  Vertex.prototype.arrOfAdjacentVertices = function (graph) {\n    var res = [];\n\n    for (var i = 0; i < graph.vertices.length; i++) {\n      if (this.isAdjacent(graph, graph.vertices[i])) {\n        res.push(graph.vertices[i]);\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * @public\r\n   * Returns string representation of the vertex\r\n   * @returns {string}\r\n   */\n\n\n  Vertex.prototype.toString = function () {\n    return this.name;\n  };\n  /**\r\n   * @public\r\n   * Deep vertex-cloning\r\n   * @returns {Vertex}\r\n   */\n\n\n  Vertex.prototype.clone = function () {\n    return new Vertex(this.name);\n  };\n  /**\r\n   * @public\r\n   * Calculates the hash function of the vertex\r\n   * @returns {string}\r\n   */\n\n\n  Vertex.prototype.hash = function () {\n    return md5_1.Md5.hashStr(this.id.toString());\n  };\n  /**\r\n   * @public\r\n   * Checks whether the second vertex equals with this one\r\n   * @param vertex\r\n   * @returns {boolean}\r\n   */\n\n\n  Vertex.prototype.equals = function (vertex) {\n    if (vertex == null) return false;\n    return this.id.equals(vertex.id);\n  };\n\n  return Vertex;\n}();\n\nexports.Vertex = Vertex;","map":{"version":3,"sources":["../../src/main/Vertex.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar md5_1 = require(\"ts-md5/dist/md5\");\r\nvar GraphID_1 = require(\"../util/GraphID\");\r\n/**\r\n * @classdesc\r\n * The vertex implementation of IVertex interface\r\n */\r\nvar Vertex = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param name\r\n     * @param graph\r\n     */\r\n    function Vertex(name, graph) {\r\n        this._name = name;\r\n        this._id = GraphID_1.GraphID.generate();\r\n        this._label = \"\";\r\n        this._wave = \"\";\r\n        this._graphReference = graph;\r\n    }\r\n    Object.defineProperty(Vertex.prototype, \"id\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for the _id field\r\n         * @returns {number}\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Vertex.prototype, \"name\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _name field\r\n         * @returns {string}\r\n         */\r\n        get: function () {\r\n            return this._name;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @property\r\n     * @private\r\n     * Private emulated setter for _name field\r\n     * @param theName\r\n     */\r\n    Vertex.prototype.setName = function (theName) {\r\n        this._name = theName;\r\n    };\r\n    Object.defineProperty(Vertex.prototype, \"label\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _label field\r\n         * @returns {string}\r\n         */\r\n        get: function () {\r\n            return this._label;\r\n        },\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Setter for _label field\r\n         * @param theLabel\r\n         */\r\n        set: function (theLabel) {\r\n            this._label = theLabel;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Vertex.prototype, \"wave\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _wave field\r\n         * @returns {string}\r\n         */\r\n        get: function () {\r\n            return this._wave;\r\n        },\r\n        /**\r\n        * @property\r\n        * @public\r\n        * Setter for _label field\r\n        * @param theLabel\r\n        */\r\n        set: function (theWave) {\r\n            this._wave = theWave;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @public\r\n     * Allows to change the name field of the vertex\r\n     * @param newName\r\n     */\r\n    Vertex.prototype.rename = function (newName) {\r\n        this.setName(newName);\r\n    };\r\n    /**\r\n     * @public\r\n     * Checks whether the edge is incident to the vertex\r\n     * @param edge\r\n     */\r\n    Vertex.prototype.isIncident = function (edge) {\r\n        return edge.vertexOne.name === this.name || edge.vertexTwo.name === this.name;\r\n    };\r\n    /**\r\n     * @public\r\n     * Checks whether the vertex is adjacent to the given one\r\n     * @param vertex\r\n     */\r\n    Vertex.prototype.isAdjacent = function (graph, vertex) {\r\n        var _this = this;\r\n        if (graph.edges.some(function (e) {\r\n            return (vertex && _this && ((e.vertexOne.name === _this.name\r\n                && e.vertexTwo.name === vertex.name)\r\n                || (e.vertexOne.name === vertex.name\r\n                    && e.vertexTwo.name === _this.name)));\r\n        }))\r\n            return true;\r\n        else\r\n            return false;\r\n    };\r\n    /**\r\n     * @public\r\n     * Return the array of incident edges for the vertex\r\n     * @param graph\r\n     */\r\n    Vertex.prototype.arrOfIncidentEdges = function (graph) {\r\n        var res = [];\r\n        for (var i = 0; i < graph.edges.length; i++) {\r\n            if (this.isIncident(graph.edges[i])) {\r\n                res.push(graph.edges[i]);\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * @public\r\n     * Return the array of adjacent vertices for the vertex\r\n     * @param graph\r\n     */\r\n    Vertex.prototype.arrOfAdjacentVertices = function (graph) {\r\n        var res = [];\r\n        for (var i = 0; i < graph.vertices.length; i++) {\r\n            if (this.isAdjacent(graph, graph.vertices[i])) {\r\n                res.push(graph.vertices[i]);\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * @public\r\n     * Returns string representation of the vertex\r\n     * @returns {string}\r\n     */\r\n    Vertex.prototype.toString = function () {\r\n        return this.name;\r\n    };\r\n    /**\r\n     * @public\r\n     * Deep vertex-cloning\r\n     * @returns {Vertex}\r\n     */\r\n    Vertex.prototype.clone = function () {\r\n        return new Vertex(this.name);\r\n    };\r\n    /**\r\n     * @public\r\n     * Calculates the hash function of the vertex\r\n     * @returns {string}\r\n     */\r\n    Vertex.prototype.hash = function () {\r\n        return md5_1.Md5.hashStr(this.id.toString());\r\n    };\r\n    /**\r\n     * @public\r\n     * Checks whether the second vertex equals with this one\r\n     * @param vertex\r\n     * @returns {boolean}\r\n     */\r\n    Vertex.prototype.equals = function (vertex) {\r\n        if (vertex == null)\r\n            return false;\r\n        return this.id.equals(vertex.id);\r\n    };\r\n    return Vertex;\r\n}());\r\nexports.Vertex = Vertex;\r\n//# sourceMappingURL=Vertex.js.map"]},"metadata":{},"sourceType":"script"}