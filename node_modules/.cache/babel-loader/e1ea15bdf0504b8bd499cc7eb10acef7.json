{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * The Edge implementation of the IEdge interface\r\n * @classdesc\r\n */\n\nvar Edge =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param vertexOne\r\n   * @param vertexTwo\r\n   */\n  function Edge(vertexOne, vertexTwo, name, weightLabel) {\n    if (name === void 0) {\n      name = undefined;\n    }\n\n    if (weightLabel === void 0) {\n      weightLabel = undefined;\n    }\n\n    this._vertexOne = vertexOne;\n    this._vertexTwo = vertexTwo;\n    this._isDirected = false;\n    this._name = name;\n    this._weightLabel = weightLabel;\n  }\n\n  Object.defineProperty(Edge.prototype, \"vertexOne\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _vertexOne field\r\n     * @return {IVertex}\r\n     */\n    get: function () {\n      return this._vertexOne;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Edge.prototype, \"vertexTwo\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _vertexTwo field\r\n     * @return {IVertex}\r\n     */\n    get: function () {\n      return this._vertexTwo;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Edge.prototype, \"name\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _isDirected field\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this._name;\n    },\n\n    /**\r\n     * @property\r\n     * @public\r\n     * Setter for _name field\r\n     */\n    set: function (value) {\n      this._name = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Edge.prototype, \"weightLabel\", {\n    /**\r\n    * @property\r\n    * @public\r\n    * Getter for _weightLabel field\r\n    * @return {number}\r\n    */\n    get: function () {\n      return this._weightLabel;\n    },\n\n    /**\r\n    * @property\r\n    * @public\r\n    * Setter for _weightLabel field\r\n    */\n    set: function (value) {\n      this._weightLabel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Edge.prototype, \"isDirected\", {\n    /**\r\n     * @property\r\n     * @public\r\n     * Getter for _isDirected field\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this._isDirected;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Edge.prototype.isIncident = function (vertex) {\n    return vertex.equals(this.vertexOne) || vertex.equals(this.vertexTwo);\n  };\n  /**\r\n   *\r\n   * @param edge\r\n   * @returns {boolean}\r\n   */\n\n\n  Edge.prototype.equals = function (edge) {\n    if (edge == null) return false;\n    return this.isDirected == edge.isDirected && (this.vertexOne.equals(edge.vertexOne) && this.vertexTwo.equals(edge.vertexTwo) || !this.isDirected && this.vertexOne.equals(edge.vertexOne) && this.vertexTwo.equals(edge.vertexTwo));\n  };\n\n  return Edge;\n}();\n\nexports.Edge = Edge;","map":{"version":3,"sources":["../../src/main/Edge.ts"],"names":[],"mappings":";;;;;AAGA;;;AAGG;;AACH,IAAA,IAAA;AAAA;AAAA,YAAA;AA+GE;;;;AAIG;AACH,WAAA,IAAA,CAAmB,SAAnB,EAAuC,SAAvC,EAA2D,IAA3D,EAAqF,WAArF,EAAoH;AAAzD,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,SAAA;AAAwB;;AAAE,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,SAAA;AAA+B;;AAClH,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,WAAL,GAAmB,KAAnB;AACA,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,YAAL,GAAoB,WAApB;AACD;;AA/ED,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAPpB;;;;;AAKG;SAEH,YAAA;AACE,aAAO,KAAK,UAAZ;AACD,KAFmB;oBAAA;;AAAA,GAApB;AAUA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AANpB;;;;;AAKG;SACH,YAAA;AACE,aAAO,KAAK,UAAZ;AACD,KAFmB;oBAAA;;AAAA,GAApB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAPf;;;;;AAKG;SAEH,YAAA;AACE,aAAO,KAAK,KAAZ;AACD,KAFc;;AAef;;;;AAIG;SAEH,UAAgB,KAAhB,EAA6B;AAC3B,WAAK,KAAL,GAAa,KAAb;AACD,KAvBc;oBAAA;;AAAA,GAAf;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAPpB;;;;;AAKC;SAEH,YAAA;AACE,aAAO,KAAK,YAAZ;AACD,KAFqB;;AAcpB;;;;AAIC;SAEH,UAAuB,KAAvB,EAAoC;AAClC,WAAK,YAAL,GAAoB,KAApB;AACD,KAtBqB;oBAAA;;AAAA,GAAtB;AAgCA,EAAA,MAAA,CAAA,cAAA,CAAW,IAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAPrB;;;;;AAKG;SAEH,YAAA;AACE,aAAO,KAAK,WAAZ;AACD,KAFoB;oBAAA;;AAAA,GAArB;;AAiBO,EAAA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,MAAlB,EAAiC;AAC/B,WAAO,MAAM,CAAC,MAAP,CAAc,KAAK,SAAnB,KAAiC,MAAM,CAAC,MAAP,CAAc,KAAK,SAAnB,CAAxC;AACD,GAFM;AAIP;;;;AAIG;;;AACI,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAAyB;AACvB,QAAI,IAAI,IAAI,IAAZ,EAAkB,OAAO,KAAP;AAElB,WAAO,KAAK,UAAL,IAAmB,IAAI,CAAC,UAAxB,KACF,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAI,CAAC,SAA3B,KAAyC,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAI,CAAC,SAA3B,CAAzC,IACE,CAAC,KAAK,UAAN,IAAoB,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAI,CAAC,SAA3B,CAApB,IAA6D,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAI,CAAC,SAA3B,CAF7D,CAAP;AAGD,GANM;;AAOT,SAAA,IAAA;AAAC,CA5ID,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The Edge implementation of the IEdge interface\r\n * @classdesc\r\n */\r\nvar Edge = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param vertexOne\r\n     * @param vertexTwo\r\n     */\r\n    function Edge(vertexOne, vertexTwo, name, weightLabel) {\r\n        if (name === void 0) { name = undefined; }\r\n        if (weightLabel === void 0) { weightLabel = undefined; }\r\n        this._vertexOne = vertexOne;\r\n        this._vertexTwo = vertexTwo;\r\n        this._isDirected = false;\r\n        this._name = name;\r\n        this._weightLabel = weightLabel;\r\n    }\r\n    Object.defineProperty(Edge.prototype, \"vertexOne\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _vertexOne field\r\n         * @return {IVertex}\r\n         */\r\n        get: function () {\r\n            return this._vertexOne;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Edge.prototype, \"vertexTwo\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _vertexTwo field\r\n         * @return {IVertex}\r\n         */\r\n        get: function () {\r\n            return this._vertexTwo;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Edge.prototype, \"name\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _isDirected field\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this._name;\r\n        },\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Setter for _name field\r\n         */\r\n        set: function (value) {\r\n            this._name = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Edge.prototype, \"weightLabel\", {\r\n        /**\r\n       * @property\r\n       * @public\r\n       * Getter for _weightLabel field\r\n       * @return {number}\r\n       */\r\n        get: function () {\r\n            return this._weightLabel;\r\n        },\r\n        /**\r\n       * @property\r\n       * @public\r\n       * Setter for _weightLabel field\r\n       */\r\n        set: function (value) {\r\n            this._weightLabel = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Edge.prototype, \"isDirected\", {\r\n        /**\r\n         * @property\r\n         * @public\r\n         * Getter for _isDirected field\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this._isDirected;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Edge.prototype.isIncident = function (vertex) {\r\n        return vertex.equals(this.vertexOne) || vertex.equals(this.vertexTwo);\r\n    };\r\n    /**\r\n     *\r\n     * @param edge\r\n     * @returns {boolean}\r\n     */\r\n    Edge.prototype.equals = function (edge) {\r\n        if (edge == null)\r\n            return false;\r\n        return this.isDirected == edge.isDirected &&\r\n            (this.vertexOne.equals(edge.vertexOne) && this.vertexTwo.equals(edge.vertexTwo)\r\n                || !this.isDirected && this.vertexOne.equals(edge.vertexOne) && this.vertexTwo.equals(edge.vertexTwo));\r\n    };\r\n    return Edge;\r\n}());\r\nexports.Edge = Edge;\r\n//# sourceMappingURL=Edge.js.map"]},"metadata":{},"sourceType":"script"}