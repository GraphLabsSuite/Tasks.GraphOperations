{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar StateColor_1 = require(\"../enums/StateColor\");\n/**\r\n * State of the graph within recursion\r\n */\n\n\nvar State =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * Initialising parameters for the algorithm\r\n   * @param graph\r\n   * @param prototype\r\n   */\n  function State(graph, prototype) {\n    var _this = this;\n\n    if (graph != null) {\n      this._verticesList = graph.vertices;\n      this._tempDs = [];\n      this._vertexColors = [];\n      this._vertexDominatedNumber = [];\n      this._vertexNeighbors = [];\n      this._vertexPossibleDominatingNumber = [];\n      this.level = 0;\n\n      for (var _i = 0, _a = graph.vertices; _i < _a.length; _i++) {\n        var vertex = _a[_i];\n        this._vertexColors[vertex.id.idValue] = StateColor_1.StateColor.WHITE;\n        this._vertexDominatedNumber[vertex.id.idValue] = 0;\n        var tempNeighbors = [];\n\n        for (var i = 0; i < graph.vertices.length; i++) {\n          if (graph.getEdge(graph.vertices[i], vertex) != null) tempNeighbors.push(graph.vertices[i]);\n        }\n\n        this._vertexNeighbors[vertex.id.idValue] = tempNeighbors;\n        this._vertexPossibleDominatingNumber[vertex.id.idValue] = tempNeighbors.length + 1;\n      }\n\n      this.nDominated = 0;\n    }\n\n    if (prototype != null) {\n      this.level = prototype.level;\n      this.nDominated = prototype.nDominated;\n      this._tempDs = [];\n\n      prototype._tempDs.forEach(function (ds) {\n        return _this._tempDs.push(ds);\n      });\n\n      this._vertexColors = {};\n\n      for (var key in prototype._vertexColors) {\n        this._vertexColors[key] = prototype._vertexColors[key];\n      }\n\n      this._vertexNeighbors = {};\n\n      for (var key in prototype._vertexNeighbors) {\n        this._vertexNeighbors[key] = prototype._vertexNeighbors[key];\n      }\n\n      this._vertexDominatedNumber = {};\n\n      for (var key in prototype._vertexDominatedNumber) {\n        this._vertexDominatedNumber[key] = prototype._vertexDominatedNumber[key];\n      }\n\n      this._vertexPossibleDominatingNumber = {};\n\n      for (var key in prototype._vertexPossibleDominatingNumber) {\n        this._vertexPossibleDominatingNumber[key] = prototype._vertexPossibleDominatingNumber[key];\n      }\n    }\n  }\n\n  Object.defineProperty(State.prototype, \"tempDs\", {\n    get: function () {\n      return this._tempDs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  State.prototype.vertexColor = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) return _this._vertexColors[v.id.idValue];\n    });\n\n    return undefined; //If nothing has been found\n  };\n\n  State.prototype.setVertexColor = function (vertex, color) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) _this._vertexColors[v.id.idValue] = color;\n    });\n  };\n\n  State.prototype.vertexNeighbors = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) return _this._vertexNeighbors[v.id.idValue];\n    });\n\n    return undefined;\n  };\n\n  State.prototype.vertexDominatedNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) return _this._vertexDominatedNumber[v.id.idValue];\n    });\n\n    return undefined;\n  };\n\n  State.prototype.decrementVertexDominatedNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) {\n        _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] - 1;\n      }\n    });\n  };\n\n  State.prototype.incrementVertexDominatedNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) {\n        _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] + 1;\n      }\n    });\n  };\n\n  State.prototype.vertexDominatedNumberValues = function () {\n    var result = [];\n\n    for (var key in this._vertexDominatedNumber) {\n      result.push(this._vertexDominatedNumber[key]);\n    }\n\n    return result;\n  };\n\n  State.prototype.vertexPossibleDominatingNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) return _this._vertexPossibleDominatingNumber[v.id.idValue];\n    });\n\n    return undefined;\n  };\n\n  State.prototype.vertexPossibleDominatingNumberValues = function () {\n    var result = [];\n\n    for (var key in this._vertexPossibleDominatingNumber) {\n      result.push(this._vertexPossibleDominatingNumber[key]);\n    }\n\n    return result;\n  };\n\n  State.prototype.decrementVertexPossibleDominatingNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) {\n        _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] - 1;\n      }\n    });\n  };\n\n  State.prototype.incrementVertexPossibleDominatingNumber = function (vertex) {\n    var _this = this;\n\n    this._verticesList.forEach(function (v) {\n      if (vertex.equals(v)) {\n        _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] + 1;\n      }\n    });\n  };\n  /**\r\n   * Clones the state for the recursion process\r\n   * @returns {State}\r\n   */\n\n\n  State.prototype.clone = function () {\n    return new State(null, this);\n  };\n\n  return State;\n}();\n\nexports.State = State;","map":{"version":3,"sources":["../../src/util/State.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StateColor_1 = require(\"../enums/StateColor\");\r\n/**\r\n * State of the graph within recursion\r\n */\r\nvar State = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * Initialising parameters for the algorithm\r\n     * @param graph\r\n     * @param prototype\r\n     */\r\n    function State(graph, prototype) {\r\n        var _this = this;\r\n        if (graph != null) {\r\n            this._verticesList = graph.vertices;\r\n            this._tempDs = [];\r\n            this._vertexColors = [];\r\n            this._vertexDominatedNumber = [];\r\n            this._vertexNeighbors = [];\r\n            this._vertexPossibleDominatingNumber = [];\r\n            this.level = 0;\r\n            for (var _i = 0, _a = graph.vertices; _i < _a.length; _i++) {\r\n                var vertex = _a[_i];\r\n                this._vertexColors[vertex.id.idValue] = StateColor_1.StateColor.WHITE;\r\n                this._vertexDominatedNumber[vertex.id.idValue] = 0;\r\n                var tempNeighbors = [];\r\n                for (var i = 0; i < graph.vertices.length; i++) {\r\n                    if (graph.getEdge(graph.vertices[i], vertex) != null)\r\n                        tempNeighbors.push(graph.vertices[i]);\r\n                }\r\n                this._vertexNeighbors[vertex.id.idValue] = tempNeighbors;\r\n                this._vertexPossibleDominatingNumber[vertex.id.idValue] = tempNeighbors.length + 1;\r\n            }\r\n            this.nDominated = 0;\r\n        }\r\n        if (prototype != null) {\r\n            this.level = prototype.level;\r\n            this.nDominated = prototype.nDominated;\r\n            this._tempDs = [];\r\n            prototype._tempDs.forEach(function (ds) { return _this._tempDs.push(ds); });\r\n            this._vertexColors = {};\r\n            for (var key in prototype._vertexColors) {\r\n                this._vertexColors[key] = prototype._vertexColors[key];\r\n            }\r\n            this._vertexNeighbors = {};\r\n            for (var key in prototype._vertexNeighbors) {\r\n                this._vertexNeighbors[key] = prototype._vertexNeighbors[key];\r\n            }\r\n            this._vertexDominatedNumber = {};\r\n            for (var key in prototype._vertexDominatedNumber) {\r\n                this._vertexDominatedNumber[key] = prototype._vertexDominatedNumber[key];\r\n            }\r\n            this._vertexPossibleDominatingNumber = {};\r\n            for (var key in prototype._vertexPossibleDominatingNumber) {\r\n                this._vertexPossibleDominatingNumber[key] = prototype._vertexPossibleDominatingNumber[key];\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(State.prototype, \"tempDs\", {\r\n        get: function () {\r\n            return this._tempDs;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    State.prototype.vertexColor = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v))\r\n                return _this._vertexColors[v.id.idValue];\r\n        });\r\n        return undefined; //If nothing has been found\r\n    };\r\n    State.prototype.setVertexColor = function (vertex, color) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v))\r\n                _this._vertexColors[v.id.idValue] = color;\r\n        });\r\n    };\r\n    State.prototype.vertexNeighbors = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v))\r\n                return _this._vertexNeighbors[v.id.idValue];\r\n        });\r\n        return undefined;\r\n    };\r\n    State.prototype.vertexDominatedNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v))\r\n                return _this._vertexDominatedNumber[v.id.idValue];\r\n        });\r\n        return undefined;\r\n    };\r\n    State.prototype.decrementVertexDominatedNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v)) {\r\n                _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] - 1;\r\n            }\r\n        });\r\n    };\r\n    State.prototype.incrementVertexDominatedNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v)) {\r\n                _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] + 1;\r\n            }\r\n        });\r\n    };\r\n    State.prototype.vertexDominatedNumberValues = function () {\r\n        var result = [];\r\n        for (var key in this._vertexDominatedNumber) {\r\n            result.push(this._vertexDominatedNumber[key]);\r\n        }\r\n        return result;\r\n    };\r\n    State.prototype.vertexPossibleDominatingNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v))\r\n                return _this._vertexPossibleDominatingNumber[v.id.idValue];\r\n        });\r\n        return undefined;\r\n    };\r\n    State.prototype.vertexPossibleDominatingNumberValues = function () {\r\n        var result = [];\r\n        for (var key in this._vertexPossibleDominatingNumber) {\r\n            result.push(this._vertexPossibleDominatingNumber[key]);\r\n        }\r\n        return result;\r\n    };\r\n    State.prototype.decrementVertexPossibleDominatingNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v)) {\r\n                _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] - 1;\r\n            }\r\n        });\r\n    };\r\n    State.prototype.incrementVertexPossibleDominatingNumber = function (vertex) {\r\n        var _this = this;\r\n        this._verticesList.forEach(function (v) {\r\n            if (vertex.equals(v)) {\r\n                _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] + 1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Clones the state for the recursion process\r\n     * @returns {State}\r\n     */\r\n    State.prototype.clone = function () {\r\n        return new State(null, this);\r\n    };\r\n    return State;\r\n}());\r\nexports.State = State;\r\n//# sourceMappingURL=State.js.map"]},"metadata":{},"sourceType":"script"}