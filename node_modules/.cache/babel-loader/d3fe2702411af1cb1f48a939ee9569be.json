{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ilya/UIR/test_5/src/App.tsx\";\nimport React from 'react'; //import logo from './logo.svg';\n\nimport './App.css'; //import { IGraphView, ToolButtonList, IMatrixView, INGraphsView, graphActionCreators, State } from \"graphlabs.core.template\";\n\nimport { GraphVisualizer, Template, Toolbar, store, StudentMark, Console } from \"graphlabs.core.template\";\nimport {\n/*Graph, SccBuilder,*/\nVertex, Edge, GraphGenerator } from \"graphlabs.core.graphs\";\nimport styles from './Template.module.scss';\nimport 'graphlabs.core.template/dist/main.css';\nimport { init1, graphModel1, init2, graphModel2, initres\n/*graphModelres,*/\n, init, graphModel } from './ForMyGraphModel';\n\nclass App extends Template {\n  constructor(...args) {\n    super(...args);\n    this.message_0 = \"\";\n    this.num_0 = 0;\n    this.state = {\n      status: store.getState().app.status\n    };\n  }\n\n  componentWillMount() {\n    let graph;\n    graph = GraphGenerator.generate(0);\n    init(graph);\n    let graph1;\n    graph1 = this.GetNewRandomGraph(5);\n    init1(graph1);\n    let graph2;\n    graph2 = this.GetNewRandomGraphForThatOne(5, graph1);\n    init2(graph2);\n    let graphres = this.ChooseTask();\n    initres(graphres); //this.scc_count = SccBuilder.findComponents(graphres).length;\n  } //Для меня в будующем: проблема невозможности удать ребро заключается в том, что я создаю два других, тем саммы ломая себе всё.\n  //Это нужно проверить и внести определённые правки. Также нужно узнать как мой модуль добавить на сайт, а не только на гитхаб.\n\n\n  ChooseTask() {\n    this.num_0 = Math.round(Math.random() * 100) % 7;\n\n    switch (this.num_0) {\n      case 0:\n        this.message_0 = \"Постройте граф, являющийся результатом объединения двух графов.\";\n        return this.Uni(graphModel1, graphModel2);\n\n      case 1:\n        this.message_0 = \"Постройте граф, являющийся результатом соединения двух графов.\";\n        return this.Joint(graphModel1, graphModel2);\n\n      case 2:\n        this.message_0 = \"Постройте граф, являющийся результатом произведения двух графов.\";\n        return this.Product(graphModel1, graphModel2);\n\n      case 3:\n        this.message_0 = \"Постройте граф, являющийся результатом композиции двух графов.\";\n        return this.Composition(graphModel1, graphModel2);\n\n      case 4:\n        this.message_0 = \"Постройте граф, являющийся результатом объединения по Зыкову двух графов.\"; // Объединение по Зыкову\n\n        return this.Uni_Z(graphModel1, graphModel2);\n\n      case 5:\n        this.message_0 = \"Постройте граф, являющийся результатом пересечения двух графов.\"; // Пересечение\n\n        return this.Cross(graphModel1, graphModel2);\n\n      case 6:\n        this.message_0 = \"Постройте граф, являющийся дополнением графа.\"; // Дополнение\n\n        return this.Addition(graphModel1);\n\n      case 7:\n        this.message_0 = \"Постройте граф, являющийся результатом декартового произведения двух графов.\"; // Декартово произведение\n\n        return this.Cartesian_Product(graphModel1, graphModel2);\n\n      default:\n        this.message_0 = \"Постройте граф, являющийся результатом объединения двух графов.\";\n        return this.Uni(graphModel1, graphModel2);\n    }\n  }\n\n  GetNewRandomGraph(num) {\n    // рандомный граф\n    let graph;\n    graph = GraphGenerator.generate(0);\n    var arr = [];\n\n    for (var i = 0; i < num; i++) {\n      arr.push(Math.round(Math.random()));\n\n      if (arr[i] === 1) {\n        let vert = new Vertex(`${i}`);\n        graph.addVertex(vert);\n      }\n    }\n\n    for (var k = 0; k < num - 1; k++) {\n      if (arr[k] === 1) {\n        for (var j = k + 1; j < num; j++) {\n          if (arr[j] === 1 && Math.random() > 0.45) {\n            // 55% chance what is edge k+j\n            let edge = new Edge(graph.getVertex(`${k}`)[0], graph.getVertex(`${j}`)[0], `${k}+${j}`);\n            graph.addEdge(edge);\n          }\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  GetNewRandomGraphForThatOne(num, graph1) {\n    // рандомный, не имеющий общих вершин с первым\n    let graph;\n    graph = GraphGenerator.generate(0);\n    var arr = [];\n    let length = graph1.vertices.length + 1;\n\n    for (var i = 0; i < num; i++) {\n      arr.push(Math.round(Math.random()));\n\n      if (arr[i] === 1) {\n        let vert = new Vertex(`${i + length}`);\n        graph.addVertex(vert);\n      }\n    }\n\n    for (var k = 0; k < num - 1; k++) {\n      if (arr[k] === 1) {\n        for (var j = k + 1; j < num; j++) {\n          if (arr[j] === 1 && Math.random() > 0.45) {\n            // 55% chance what is edge k+j\n            let edge = new Edge(graph.getVertex(`${k + length}`)[0], graph.getVertex(`${j + length}`)[0], `${k + length}+${j + length}`);\n            graph.addEdge(edge);\n          }\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  Uni(graph1, graph2) {\n    // объединение\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graphres.addVertex(v);\n    });\n    graph1.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph2.vertices.forEach(v => {\n      if (!(graphres.getVertex(`${v.name}`).length > 0)) {\n        // если нет таких же по имени вершин\n        graphres.addVertex(v);\n      }\n    });\n    graph2.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph1.edges.forEach(e => {\n      let vv1 = graphres.getVertex(`${e.vertexOne.name}`)[0];\n      let vv2 = graphres.getVertex(`${e.vertexTwo.name}`)[0];\n      let e_new;\n      e_new = new Edge(vv1, vv2);\n      graphres.addEdge(e_new);\n    });\n    graph2.edges.forEach(e => {\n      let vv1 = graphres.getVertex(`${e.vertexOne.name}`)[0];\n      let vv2 = graphres.getVertex(`${e.vertexTwo.name}`)[0];\n      let e_new;\n      e_new = new Edge(vv1, vv2);\n      graphres.addEdge(e_new);\n    });\n    return graphres;\n  }\n\n  Operation2(graph1, graph2) {\n    // соединение по  (это и есть простое соединение)\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graphres.addVertex(v);\n    });\n    graph1.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph2.vertices.forEach(v => {\n      if (!(graphres.getVertex(`${v.name}`).length > 0)) {\n        // если нет таких же по имени вершин\n        graphres.addVertex(v);\n        graph1.vertices.forEach(v1 => {\n          // дополнение к объединению\n          if (!(graphres.getEdge(v, v1).length > 0)) {\n            let e;\n            e = new Edge(v, v1);\n            graphres.addEdge(e);\n          }\n        });\n      }\n    });\n    graph2.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    return graphres;\n  }\n\n  Joint(graph1, graph2) {\n    // соединение !!!!! без пересечения вершин !!!!!\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graphres.addVertex(v);\n      graph2.vertices.forEach(v1 => {\n        if (!(graphres.getVertex(`${v1.name}`).length > 0)) graphres.addVertex(v1);\n        let e;\n        e = new Edge(v, v1);\n        graphres.addEdge(e);\n      });\n    });\n    graph1.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph2.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    return graphres;\n  }\n\n  Product(graph1, graph2) {\n    // Произведение !!!!! без пересечения вершин !!!!!\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graph2.vertices.forEach(v1 => {\n        let v_res;\n        v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n\n        graphres.addVertex(v_res); //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n        //graphres.addVertex(v_res);\n      });\n    });\n    graph1.vertices.forEach(v1 => {\n      graph2.vertices.forEach(v2 => {\n        graph1.vertices.forEach(u1 => {\n          graph2.vertices.forEach(u2 => {\n            if (u1.name !== v1.name || u2.name !== v2.name) {\n              if (u1.name === v1.name && v2.isAdjacent(graph2, u2)) {\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              } else if (u2.name === v2.name && v1.isAdjacent(graph1, u1)) {\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              }\n            }\n          });\n        });\n      });\n    });\n    return graphres;\n  }\n\n  Composition(graph1, graph2) {\n    // Композиция !!!!! без пересечения вершин !!!!!\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graph2.vertices.forEach(v1 => {\n        let v_res;\n        v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n\n        graphres.addVertex(v_res); //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n        //graphres.addVertex(v_res);\n      });\n    });\n    graph1.vertices.forEach(v1 => {\n      graph2.vertices.forEach(v2 => {\n        graph1.vertices.forEach(u1 => {\n          graph2.vertices.forEach(u2 => {\n            if (u1.name !== v1.name || u2.name !== v2.name) {\n              //let e_0: IEdge;\n              //e_0=new Edge(v1,v2)\n              if (u1.name === v1.name && v2.isAdjacent(graph2, u2)) {\n                //graph2.getEdge(v2,u2).length>0 ){\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              } else if (v1.isAdjacent(graph1, u1)) {\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              }\n            }\n          });\n        });\n      });\n    });\n    return graphres;\n  }\n\n  Uni_Z(graph1, graph2) {\n    // объединение по Зыкову\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graphres.addVertex(v);\n    });\n    graph1.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph2.vertices.forEach(v => {\n      if (!(graphres.getVertex(`${v.name}`).length > 0)) {\n        // если нет таких же по имени вершин\n        graphres.addVertex(v);\n      }\n    });\n    graph2.edges.forEach(e => {\n      graphres.addEdge(e);\n    });\n    graph1.vertices.forEach(v1 => {\n      graph2.vertices.forEach(v2 => {\n        if (!graphres.getVertex(v1.name)[0].isAdjacent(graphres, graphres.getVertex(v2.name)[0])) {\n          let vv1 = graphres.getVertex(`${v1.name}`)[0];\n          let vv2 = graphres.getVertex(`${v2.name}`)[0];\n          let e;\n          e = new Edge(vv1, vv2);\n          graphres.addEdge(e);\n        }\n      });\n    });\n    return graphres;\n  }\n\n  Cross(graph1, graph2) {\n    // Пересечение\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v1 => {\n      graph2.vertices.forEach(v2 => {\n        if (v1.name === v2.name) {\n          let v_res;\n          v_res = new Vertex(`${v1.name}`);\n          graphres.addVertex(v_res);\n        }\n      });\n    });\n    graph1.edges.forEach(u1 => {\n      graph2.edges.forEach(u2 => {\n        if (u1.vertexOne.name === u2.vertexOne.name && u1.vertexTwo.name === u2.vertexTwo.name || u1.vertexOne.name === u2.vertexTwo.name && u1.vertexTwo.name === u2.vertexOne.name) {\n          let v1 = graphres.getVertex(`${u1.vertexOne.name}`);\n          let v2 = graphres.getVertex(`${u1.vertexTwo.name}`);\n          let e;\n          e = new Edge(v1[0], v2[0]);\n          graphres.addEdge(e);\n        }\n      });\n    });\n    return graphres;\n  }\n\n  Addition(graph1) {\n    // Дополнение\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v1 => {\n      let v_res;\n      v_res = new Vertex(`${v1.name}`);\n      graphres.addVertex(v_res);\n    });\n    graph1.vertices.forEach(v1 => {\n      graph1.vertices.forEach(v2 => {\n        let vv1 = v1.name;\n        let vv2 = v2.name;\n\n        if (v1.name !== v2.name && !v1.isAdjacent(graph1, v2) && !graphres.getVertex(v1.name)[0].isAdjacent(graphres, graphres.getVertex(v2.name)[0])) {\n          let v1 = graphres.getVertex(`${vv1}`);\n          let v2 = graphres.getVertex(`${vv2}`);\n          let e;\n          e = new Edge(v1[0], v2[0]);\n          graphres.addEdge(e);\n        }\n      });\n    });\n    let graph2;\n    graph2 = this.GetNewRandomGraph(0);\n    init2(graph2);\n    return graphres;\n  }\n\n  Cartesian_Product(graph1, graph2) {\n    // Декартово произведение !!!!! без пересечения вершин !!!!!\n    let graphres;\n    graphres = GraphGenerator.generate(0);\n    graph1.vertices.forEach(v => {\n      graph2.vertices.forEach(v1 => {\n        let v_res;\n        v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n\n        graphres.addVertex(v_res); //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n        //graphres.addVertex(v_res);\n      });\n    });\n    graph1.vertices.forEach(v1 => {\n      graph2.vertices.forEach(v2 => {\n        graph1.vertices.forEach(u1 => {\n          graph2.vertices.forEach(u2 => {\n            if (u1.name !== v1.name || u2.name !== v2.name) {\n              //let e_0: IEdge;\n              //e_0=new Edge(v1,v2)\n              if (u1.name === v1.name && v2.isAdjacent(graph2, u2)) {\n                //graph2.getEdge(v2,u2).length>0 ){\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              } else if (v1.isAdjacent(graph1, u1)) {\n                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n                let e;\n                e = new Edge(vv1[0], vv2[0]);\n                graphres.addEdge(e);\n              }\n            }\n          });\n        });\n      });\n    });\n    return graphres;\n  }\n  /*public constructor(props: {}) {\n      super(props);\n      //this.render = this.render.bind(this);\n      //this.getArea = this.getArea.bind(this);\n      store.subscribe(() => {\n          if (store.getState().app.status !== this.state.status) {\n              this.setState({\n                  status: store.getState().app.status,\n              });\n          }\n      });\n       //this.task = this.task.bind(this);\n      //this.getTaskToolbar = this.getTaskToolbar.bind(this);\n   }*/\n\n\n  render() {\n    const Task = this.task();\n    const Toolbar = this.getTaskToolbar();\n    const Area = this.getArea51();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.App,\n      id: \"wrap\",\n      children: this.state.status ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E. \\u041E\\u0436\\u0438\\u0434\\u0430\\u0439\\u0442\\u0435 \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430 \\u043E\\u0442 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.MainRow,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.GraphCell,\n            children: /*#__PURE__*/_jsxDEV(Area, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.ToolCell,\n            children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.TaskCell,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u0417\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Task, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.LeftBottom,\n          children: /*#__PURE__*/_jsxDEV(StudentMark, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.LowRow,\n          children: /*#__PURE__*/_jsxDEV(Console, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }, this);\n  } //<Task/>\n\n\n  getTaskToolbar() {\n    return Toolbar;\n  }\n\n  getArea51() {\n    return () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(GraphVisualizer, {\n          graph: graphModel,\n          adapterType: 'writable',\n          namedEdges: false,\n          vertexNaming: true,\n          withoutDragging: true,\n          edgeNaming: false,\n          incidentEdges: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 22\n    }, this); //return () =>\n    //    <GraphVisualizer\n    //        graph={graphModelres}\n    //        adapterType={'readable'}\n    //        namedEdges={false}\n    //        vertexNaming={false}\n    //        withoutDragging={false}\n    //        edgeNaming={false}\n    //        incidentEdges={false}\n    //    />;\n  }\n\n  task() {\n    graphModel.vertices.forEach(v => console.log(`id = ${v.id}; label = ${v.label}; name = ${v.name}; wawe=${v.wave}.\\n`));\n    return () => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.message_0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.num_0 !== 6 ? \"1.\" : '', /*#__PURE__*/_jsxDEV(GraphVisualizer, {\n            graph: graphModel1,\n            adapterType: 'readable',\n            namedEdges: false,\n            vertexNaming: false,\n            withoutDragging: true,\n            edgeNaming: false,\n            incidentEdges: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [this.num_0 !== 6 ? \"2.\" : '', /*#__PURE__*/_jsxDEV(GraphVisualizer, {\n            graph: graphModel2,\n            adapterType: 'readable',\n            namedEdges: false,\n            vertexNaming: false,\n            withoutDragging: true,\n            edgeNaming: false,\n            incidentEdges: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ilya/UIR/test_5/src/App.tsx"],"names":["React","GraphVisualizer","Template","Toolbar","store","StudentMark","Console","Vertex","Edge","GraphGenerator","styles","init1","graphModel1","init2","graphModel2","initres","init","graphModel","App","message_0","num_0","state","status","getState","app","componentWillMount","graph","generate","graph1","GetNewRandomGraph","graph2","GetNewRandomGraphForThatOne","graphres","ChooseTask","Math","round","random","Uni","Joint","Product","Composition","Uni_Z","Cross","Addition","Cartesian_Product","num","arr","i","push","vert","addVertex","k","j","edge","getVertex","addEdge","length","vertices","forEach","v","edges","e","name","vv1","vertexOne","vv2","vertexTwo","e_new","Operation2","v1","getEdge","v_res","v2","u1","u2","isAdjacent","render","Task","task","getTaskToolbar","Area","getArea51","MainRow","GraphCell","ToolCell","TaskCell","LeftBottom","LowRow","console","log","id","label","wave"],"mappings":"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","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n//import { IGraphView, ToolButtonList, IMatrixView, INGraphsView, graphActionCreators, State } from \"graphlabs.core.template\";\nimport { GraphVisualizer, Template, Toolbar, store, StudentMark, Console } from \"graphlabs.core.template\";\nimport {  /*Graph, SccBuilder,*/ IGraph, IVertex, IEdge, Vertex, Edge, GraphGenerator } from \"graphlabs.core.graphs\";\nimport styles from './Template.module.scss';\nimport 'graphlabs.core.template/dist/main.css';\n\nimport { /*Component,*/ SFC} from 'react';\nimport { init1, graphModel1, init2, graphModel2, initres, /*graphModelres,*/ init, graphModel } from './ForMyGraphModel';\n\nclass App extends Template {\n    protected message_0 = \"\";\n    protected num_0 = 0;\n\n    public state = {\n        status: store.getState().app.status,\n    };\n\n    componentWillMount() {\n        let graph: IGraph<IVertex, IEdge>;\n\n        graph = GraphGenerator.generate(0);\n        init(graph);\n\n        let graph1: IGraph<IVertex, IEdge>;\n        graph1 = this.GetNewRandomGraph(5);\n        init1(graph1);\n\n        let graph2: IGraph<IVertex, IEdge>;\n        graph2 = this.GetNewRandomGraphForThatOne(5,graph1);\n        init2(graph2);\n\n        let graphres = this.ChooseTask();\n        initres(graphres);\n        //this.scc_count = SccBuilder.findComponents(graphres).length;\n    }\n\n\n        //Для меня в будующем: проблема невозможности удать ребро заключается в том, что я создаю два других, тем саммы ломая себе всё.\n        //Это нужно проверить и внести определённые правки. Также нужно узнать как мой модуль добавить на сайт, а не только на гитхаб.\n\n\n    protected ChooseTask(){\n        this.num_0 = Math.round(Math.random() * 100)%7;\n        switch (this.num_0) {\n            case 0:\n                this.message_0 = \"Постройте граф, являющийся результатом объединения двух графов.\";\n                return this.Uni(graphModel1,graphModel2);\n            case 1:\n                this.message_0 = \"Постройте граф, являющийся результатом соединения двух графов.\";\n                return this.Joint(graphModel1,graphModel2);\n            case 2:\n                this.message_0 = \"Постройте граф, являющийся результатом произведения двух графов.\";\n                return this.Product(graphModel1,graphModel2);\n            case 3:\n                this.message_0 = \"Постройте граф, являющийся результатом композиции двух графов.\";\n                return this.Composition(graphModel1,graphModel2);\n            case 4:\n                this.message_0 = \"Постройте граф, являющийся результатом объединения по Зыкову двух графов.\"; // Объединение по Зыкову\n                return this.Uni_Z(graphModel1,graphModel2);\n            case 5:\n                this.message_0 = \"Постройте граф, являющийся результатом пересечения двух графов.\"; // Пересечение\n                return this.Cross(graphModel1,graphModel2);\n            case 6:\n                this.message_0 = \"Постройте граф, являющийся дополнением графа.\"; // Дополнение\n                return this.Addition(graphModel1);\n            case 7:\n                this.message_0 = \"Постройте граф, являющийся результатом декартового произведения двух графов.\"; // Декартово произведение\n                return this.Cartesian_Product(graphModel1,graphModel2);\n            default:\n                this.message_0 = \"Постройте граф, являющийся результатом объединения двух графов.\";\n                return this.Uni(graphModel1,graphModel2);\n        }\n    }\n\n    protected GetNewRandomGraph (num:number){ // рандомный граф\n        let graph: IGraph<IVertex, IEdge>;\n        graph = GraphGenerator.generate(0);\n        var arr = [];\n        for(var i = 0; i<num; i++ ){\n            arr.push(Math.round(Math.random()));\n            if(arr[i]===1){\n                let vert = new Vertex(`${i}`);\n                graph.addVertex(vert);\n            }\n        }\n        for(var k=0;k<num-1;k++){\n            if(arr[k]===1) {\n                for(var j = k+1;j<num;j++){\n                    if(arr[j]===1 && Math.random()>0.45 ){ // 55% chance what is edge k+j\n                        let edge = new Edge(graph.getVertex(`${k}`)[0],graph.getVertex(`${j}`)[0],`${k}+${j}`);\n                        graph.addEdge(edge);\n                    }\n                }\n            }\n        }\n        return graph;\n    }\n\n    protected GetNewRandomGraphForThatOne (num:number, graph1:IGraph<IVertex, IEdge>){ // рандомный, не имеющий общих вершин с первым\n        let graph: IGraph<IVertex, IEdge>;\n        graph = GraphGenerator.generate(0);\n        var arr = [];\n        let length = graph1.vertices.length+1;\n        for(var i = 0; i<num; i++ ){\n            arr.push(Math.round(Math.random()));\n            if(arr[i]===1){\n                let vert = new Vertex(`${i+length}`);\n                graph.addVertex(vert);\n            }\n        }\n        for(var k=0;k<num-1;k++){\n            if(arr[k]===1) {\n                for(var j = k+1;j<num;j++){\n                    if(arr[j]===1 && Math.random()>0.45 ){ // 55% chance what is edge k+j\n                        let edge = new Edge(graph.getVertex(`${k+length}`)[0],graph.getVertex(`${j+length}`)[0],`${k+length}+${j+length}`);\n                        graph.addEdge(edge);\n                    }\n                }\n            }\n        }\n        return graph;\n    }\n\n    protected Uni(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // объединение\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n        graph1.vertices.forEach((v:any)=>{\n            graphres.addVertex(v);\n        });\n        graph1.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph2.vertices.forEach((v: any)=>{\n            if(!(graphres.getVertex(`${v.name}`).length>0)){ // если нет таких же по имени вершин\n                graphres.addVertex(v);\n            }\n        });\n        graph2.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph1.edges.forEach((e: any)=> {\n            let vv1 = graphres.getVertex(`${e.vertexOne.name}`)[0];\n            let vv2 = graphres.getVertex(`${e.vertexTwo.name}`)[0];\n\n            let e_new: IEdge;\n            e_new = new Edge(vv1,vv2);\n            graphres.addEdge(e_new);\n        });\n        graph2.edges.forEach((e: any)=> {\n            let vv1 = graphres.getVertex(`${e.vertexOne.name}`)[0];\n            let vv2 = graphres.getVertex(`${e.vertexTwo.name}`)[0];\n\n            let e_new: IEdge;\n            e_new = new Edge(vv1,vv2);\n            graphres.addEdge(e_new);\n        });\n        return graphres;\n    }\n\n    protected Operation2(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // соединение по  (это и есть простое соединение)\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n        graph1.vertices.forEach((v:any)=>{\n            graphres.addVertex(v);\n        });\n        graph1.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph2.vertices.forEach((v: any)=>{\n            if(!(graphres.getVertex(`${v.name}`).length>0)){ // если нет таких же по имени вершин\n                graphres.addVertex(v);\n\n                graph1.vertices.forEach((v1:any)=>{ // дополнение к объединению\n                    if(!(graphres.getEdge(v,v1).length>0)){\n                        let e: IEdge;\n                        e = new Edge(v,v1);\n                        graphres.addEdge(e);\n                    }\n                });\n            }\n        });\n        graph2.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        return graphres;\n    }\n\n    protected Joint(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // соединение !!!!! без пересечения вершин !!!!!\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n        graph1.vertices.forEach(v=>{\n            graphres.addVertex(v);\n            graph2.vertices.forEach(v1=>{\n                if(!(graphres.getVertex(`${v1.name}`).length>0))\n                    graphres.addVertex(v1);\n                let e: IEdge;\n                e = new Edge(v,v1);\n                graphres.addEdge(e);\n            });\n        });\n        graph1.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph2.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        return graphres;\n    }\n\n    protected Product(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // Произведение !!!!! без пересечения вершин !!!!!\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n\n        graph1.vertices.forEach(v=>{\n            graph2.vertices.forEach(v1=>{\n                let v_res: IVertex;\n                v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n                graphres.addVertex(v_res);\n                //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n                //graphres.addVertex(v_res);\n\n            });\n        });\n\n        graph1.vertices.forEach(v1=>{\n            graph2.vertices.forEach(v2=>{\n                graph1.vertices.forEach(u1=>{\n                    graph2.vertices.forEach(u2=>{\n                        if(u1.name!==v1.name||u2.name!==v2.name){\n                            if((u1.name===v1.name)&&(v2.isAdjacent(graph2,u2))){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n\n                            else if((u2.name===v2.name)&&(v1.isAdjacent(graph1,u1))){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n                        }\n\n                    });\n                });\n            });\n        });\n\n        return graphres;\n    }\n\n    protected Composition(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // Композиция !!!!! без пересечения вершин !!!!!\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n\n        graph1.vertices.forEach(v=>{\n            graph2.vertices.forEach(v1=>{\n                let v_res: IVertex;\n                v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n                graphres.addVertex(v_res);\n                //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n                //graphres.addVertex(v_res);\n\n            });\n        });\n\n        graph1.vertices.forEach(v1=>{\n            graph2.vertices.forEach(v2=>{\n                graph1.vertices.forEach(u1=>{\n                    graph2.vertices.forEach(u2=>{\n                        if(u1.name!==v1.name || u2.name!==v2.name){\n                            //let e_0: IEdge;\n                            //e_0=new Edge(v1,v2)\n                            if((u1.name===v1.name) && v2.isAdjacent(graph2,u2)){//graph2.getEdge(v2,u2).length>0 ){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n\n                            else if(v1.isAdjacent(graph1,u1)){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n                        }\n\n                    });\n                });\n            });\n        });\n\n        return graphres;\n    }\n\n    protected Uni_Z(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // объединение по Зыкову\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n        graph1.vertices.forEach((v:any)=>{\n            graphres.addVertex(v);\n        });\n        graph1.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph2.vertices.forEach((v: any)=>{\n            if(!(graphres.getVertex(`${v.name}`).length>0)){ // если нет таких же по имени вершин\n                graphres.addVertex(v);\n            }\n        });\n        graph2.edges.forEach((e:any)=>{\n            graphres.addEdge(e);\n        });\n        graph1.vertices.forEach((v1: any)=> {\n            graph2.vertices.forEach((v2: any)=> {\n                if (!(graphres.getVertex(v1.name)[0].isAdjacent(graphres,graphres.getVertex(v2.name)[0]))){\n                    let vv1 = graphres.getVertex(`${v1.name}`)[0];\n                    let vv2 = graphres.getVertex(`${v2.name}`)[0];\n\n                    let e: IEdge;\n                    e = new Edge(vv1,vv2);\n                    graphres.addEdge(e);\n                }\n            });\n        });\n        return graphres;\n    }\n\n    protected Cross(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // Пересечение\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n\n        graph1.vertices.forEach(v1=>{\n            graph2.vertices.forEach(v2=>{\n                if (v1.name === v2.name){\n                    let v_res: IVertex;\n                    v_res = new Vertex(`${v1.name}`);\n                    graphres.addVertex(v_res);\n                }\n            });\n        });\n\n        graph1.edges.forEach(u1=>{\n            graph2.edges.forEach(u2=>{\n                if ((u1.vertexOne.name === u2.vertexOne.name && u1.vertexTwo.name === u2.vertexTwo.name) || (u1.vertexOne.name === u2.vertexTwo.name && u1.vertexTwo.name === u2.vertexOne.name)){\n                    let v1 = graphres.getVertex(`${u1.vertexOne.name}`);\n                    let v2 = graphres.getVertex(`${u1.vertexTwo.name}`);\n\n                    let e: IEdge;\n                    e = new Edge(v1[0],v2[0]);\n                    graphres.addEdge(e);\n                }\n            });\n        });\n\n        return graphres;\n    }\n\n    protected Addition(graph1: IGraph<IVertex, IEdge>){ // Дополнение\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n\n        graph1.vertices.forEach(v1=>{\n            let v_res: IVertex;\n            v_res = new Vertex(`${v1.name}`);\n            graphres.addVertex(v_res);\n        });\n\n        graph1.vertices.forEach(v1=>{\n            graph1.vertices.forEach(v2=>{\n                let vv1 = v1.name;\n                let vv2 = v2.name;\n                if (v1.name !== v2.name && !(v1.isAdjacent(graph1,v2)) && !(graphres.getVertex(v1.name)[0].isAdjacent(graphres,graphres.getVertex(v2.name)[0]))){\n                    let v1 = graphres.getVertex(`${vv1}`);\n                    let v2 = graphres.getVertex(`${vv2}`);\n\n                    let e: IEdge;\n                    e = new Edge(v1[0],v2[0]);\n                    graphres.addEdge(e);\n                }\n            });\n        });\n\n        let graph2: IGraph<IVertex, IEdge>;\n        graph2 = this.GetNewRandomGraph(0);\n        init2(graph2);\n\n\n        return graphres;\n    }\n\n    protected Cartesian_Product(graph1: IGraph<IVertex, IEdge>,graph2: IGraph<IVertex, IEdge>){ // Декартово произведение !!!!! без пересечения вершин !!!!!\n        let graphres: IGraph<IVertex, IEdge>;\n        graphres = GraphGenerator.generate(0);\n\n        graph1.vertices.forEach(v=>{\n            graph2.vertices.forEach(v1=>{\n                let v_res: IVertex;\n                v_res = new Vertex(`${v.name}${v1.name}`); // ???????????????\n                graphres.addVertex(v_res);\n                //v_res = new Vertex(`${v.name},${v1.name}`,graphres); // ???????????????\n                //graphres.addVertex(v_res);\n\n            });\n        });\n\n        graph1.vertices.forEach(v1=>{\n            graph2.vertices.forEach(v2=>{\n                graph1.vertices.forEach(u1=>{\n                    graph2.vertices.forEach(u2=>{\n                        if(u1.name!==v1.name || u2.name!==v2.name){\n                            //let e_0: IEdge;\n                            //e_0=new Edge(v1,v2)\n                            if((u1.name===v1.name) && v2.isAdjacent(graph2,u2)){//graph2.getEdge(v2,u2).length>0 ){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n\n                            else if(v1.isAdjacent(graph1,u1)){\n                                let vv1 = graphres.getVertex(`${v1.name}${v2.name}`);\n                                let vv2 = graphres.getVertex(`${u1.name}${u2.name}`);\n\n                                let e: IEdge;\n                                e = new Edge(vv1[0],vv2[0]);\n                                graphres.addEdge(e);\n                            }\n                        }\n\n                    });\n                });\n            });\n        });\n\n        return graphres;\n    }\n\n    /*public constructor(props: {}) {\n        super(props);\n        //this.render = this.render.bind(this);\n        //this.getArea = this.getArea.bind(this);\n        store.subscribe(() => {\n            if (store.getState().app.status !== this.state.status) {\n                this.setState({\n                    status: store.getState().app.status,\n                });\n            }\n        });\n\n        //this.task = this.task.bind(this);\n        //this.getTaskToolbar = this.getTaskToolbar.bind(this);\n\n    }*/\n\n    public render():JSX.Element {\n        const Task: any = this.task();\n        const Toolbar = this.getTaskToolbar();\n        const Area = this.getArea51();\n        return (\n            <div className={styles.App} id=\"wrap\">\n                {this.state.status\n                    ? <p>Задание выполнено. Ожидайте ответа от сервера...</p>\n                    : (\n                        <div>\n                            <div className={styles.MainRow}>\n                                <div className={styles.GraphCell}>\n                                    <Area/>\n                                </div>\n                                <div className={styles.ToolCell}>\n                                    <Toolbar/>\n                                </div>\n                                <div className={styles.TaskCell}>\n                                    <p>Задание</p>\n                                    <Task/>\n                                </div>\n                            </div>\n                            <div className={styles.LeftBottom}>\n                                <StudentMark/>\n                            </div>\n                            <div className={styles.LowRow}>\n                                <Console/>\n                            </div>\n                        </div>)}\n            </div>\n        );\n    }//<Task/>\n\n    protected getTaskToolbar() {\n        return Toolbar;\n    }\n\n    protected getArea51(): SFC<{}> {\n        return () => <div>\n            <p>\n                <GraphVisualizer\n                    graph={graphModel}\n                    adapterType={'writable'}\n                    namedEdges={false}\n                    vertexNaming={true}\n                    withoutDragging={true}\n                    edgeNaming={false}\n                    incidentEdges={true}\n                />\n            </p>\n        </div>;\n\n        //return () =>\n        //    <GraphVisualizer\n        //        graph={graphModelres}\n        //        adapterType={'readable'}\n        //        namedEdges={false}\n        //        vertexNaming={false}\n        //        withoutDragging={false}\n        //        edgeNaming={false}\n        //        incidentEdges={false}\n        //    />;\n    }\n\n    protected task(): SFC<{}> {\n        graphModel.vertices.forEach(v => (console.log(`id = ${v.id}; label = ${v.label}; name = ${v.name}; wawe=${v.wave}.\\n`)));\n        return () =>\n            <div>\n                <p>\n                    {this.message_0}\n                </p>\n                <div>\n                    <p>\n                        {this.num_0!==6?\"1.\":''}<GraphVisualizer\n                            graph={graphModel1}\n                            adapterType={'readable'}\n                            namedEdges={false}\n                            vertexNaming={false}\n                            withoutDragging={true}\n                            edgeNaming={false}\n                            incidentEdges={true}\n                        />\n                    </p>\n                    <p>\n                        {this.num_0!==6?\"2.\":''}<GraphVisualizer\n                            graph={graphModel2}\n                            adapterType={'readable'}\n                            namedEdges={false}\n                            vertexNaming={false}\n                            withoutDragging={true}\n                            edgeNaming={false}\n                            incidentEdges={true}\n                        />\n                    </p>\n                </div>\n            </div>;\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}