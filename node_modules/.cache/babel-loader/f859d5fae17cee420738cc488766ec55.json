{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Matrix operations\r\n */\n\nvar MatrixOperations =\n/** @class */\nfunction () {\n  function MatrixOperations() {}\n\n  MatrixOperations.Sum = function (matrix1, matrix2) {\n    if (matrix1.length == matrix2.length && matrix1[0].length == matrix2[0].length) {\n      for (var i = 0; i < matrix1.length; i++) {\n        for (var j = 0; j < matrix1[i].length; j++) {\n          matrix1[i][j] += matrix2[i][j];\n        }\n      }\n    }\n\n    return matrix1;\n  };\n\n  MatrixOperations.Multiply = function (matrix1, matrix2) {\n    var result = [];\n\n    if (matrix1[0].length == matrix2.length) {\n      for (var i = 0; i < matrix1.length; i++) {\n        result[i] = [];\n\n        for (var k = 0; k < matrix2[i].length; k++) {\n          result[i][k] = 0;\n\n          for (var j = 0; j < matrix2.length; j++) {\n            result[i][k] += matrix1[i][j] * matrix2[j][k];\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  MatrixOperations.Power = function (matrix, power) {\n    if (power > 0) {\n      for (var k = 1; k < power; k++) matrix = MatrixOperations.Multiply(matrix, matrix);\n    }\n\n    return matrix;\n  };\n\n  MatrixOperations.Binary = function (matrix) {\n    for (var i = 0; i < matrix.length; i++) {\n      for (var j = 0; j < matrix[i].length; j++) {\n        if (matrix[i][j] > 0) {\n          matrix[i][j] = 1;\n        }\n      }\n    }\n\n    return matrix;\n  };\n\n  return MatrixOperations;\n}();\n\nexports.MatrixOperations = MatrixOperations;","map":{"version":3,"sources":["../../src/helpers/MatrixOperations.ts"],"names":[],"mappings":";;;;;AAAA;;AAEG;;AACH,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CA+CC;;AA7CiB,EAAA,gBAAA,CAAA,GAAA,GAAd,UAAkB,OAAlB,EAAuC,OAAvC,EAA0D;AACtD,QAAI,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,MAA1B,IAAoC,OAAO,CAAC,CAAD,CAAP,CAAW,MAAX,IAAqB,OAAO,CAAC,CAAD,CAAP,CAAW,MAAxE,EAA+E;AAC3E,WAAK,IAAI,CAAC,GAAU,CAApB,EAAuB,CAAC,GAAG,OAAO,CAAC,MAAnC,EAA2C,CAAC,EAA5C,EAA+C;AAC3C,aAAK,IAAI,CAAC,GAAW,CAArB,EAAwB,CAAC,GAAE,OAAO,CAAC,CAAD,CAAP,CAAW,MAAtC,EAA8C,CAAC,EAA/C,EAAkD;AAC9C,UAAA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,KAAiB,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAjB;AACH;AACJ;AACJ;;AACD,WAAO,OAAP;AACH,GATa;;AAWA,EAAA,gBAAA,CAAA,QAAA,GAAd,UAAuB,OAAvB,EAA4C,OAA5C,EAA+D;AAC3D,QAAM,MAAM,GAAe,EAA3B;;AACA,QAAI,OAAO,CAAC,CAAD,CAAP,CAAW,MAAX,IAAqB,OAAO,CAAC,MAAjC,EAAwC;AACpC,WAAK,IAAI,CAAC,GAAU,CAApB,EAAuB,CAAC,GAAG,OAAO,CAAC,MAAnC,EAA2C,CAAC,EAA5C,EAA+C;AAC3C,QAAA,MAAM,CAAC,CAAD,CAAN,GAAY,EAAZ;;AACA,aAAK,IAAI,CAAC,GAAW,CAArB,EAAwB,CAAC,GAAG,OAAO,CAAC,CAAD,CAAP,CAAW,MAAvC,EAA+C,CAAC,EAAhD,EAAmD;AAC/C,UAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAe,CAAf;;AACA,eAAK,IAAI,CAAC,GAAW,CAArB,EAAwB,CAAC,GAAG,OAAO,CAAE,MAArC,EAA6C,CAAC,EAA9C,EAAkD;AAC9C,YAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,KAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,IAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAhC;AACH;AACJ;AACJ;AACJ;;AACD,WAAO,MAAP;AACH,GAda;;AAgBA,EAAA,gBAAA,CAAA,KAAA,GAAd,UAAoB,MAApB,EAAwC,KAAxC,EAAqD;AACjD,QAAI,KAAK,GAAG,CAAZ,EAAc;AACV,WAAK,IAAI,CAAC,GAAW,CAArB,EAAwB,CAAC,GAAG,KAA5B,EAAmC,CAAC,EAApC,EACA,MAAM,GAAG,gBAAgB,CAAC,QAAjB,CAA0B,MAA1B,EAAkC,MAAlC,CAAT;AACH;;AACD,WAAO,MAAP;AACH,GANa;;AAQA,EAAA,gBAAA,CAAA,MAAA,GAAd,UAAqB,MAArB,EAAuC;AACnC,SAAK,IAAI,CAAC,GAAU,CAApB,EAAuB,CAAC,GAAG,MAAM,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA8C;AAC1C,WAAK,IAAI,CAAC,GAAW,CAArB,EAAwB,CAAC,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AAC3C,YAAI,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAe,CAAnB,EAAqB;AACjB,UAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAe,CAAf;AACH;AACR;AACJ;;AACD,WAAO,MAAP;AACH,GATa;;AAUlB,SAAA,gBAAA;AAAC,CA/CD,EAAA;;AAAa,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Matrix operations\r\n */\r\nvar MatrixOperations = /** @class */ (function () {\r\n    function MatrixOperations() {\r\n    }\r\n    MatrixOperations.Sum = function (matrix1, matrix2) {\r\n        if (matrix1.length == matrix2.length && matrix1[0].length == matrix2[0].length) {\r\n            for (var i = 0; i < matrix1.length; i++) {\r\n                for (var j = 0; j < matrix1[i].length; j++) {\r\n                    matrix1[i][j] += matrix2[i][j];\r\n                }\r\n            }\r\n        }\r\n        return matrix1;\r\n    };\r\n    MatrixOperations.Multiply = function (matrix1, matrix2) {\r\n        var result = [];\r\n        if (matrix1[0].length == matrix2.length) {\r\n            for (var i = 0; i < matrix1.length; i++) {\r\n                result[i] = [];\r\n                for (var k = 0; k < matrix2[i].length; k++) {\r\n                    result[i][k] = 0;\r\n                    for (var j = 0; j < matrix2.length; j++) {\r\n                        result[i][k] += matrix1[i][j] * matrix2[j][k];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    MatrixOperations.Power = function (matrix, power) {\r\n        if (power > 0) {\r\n            for (var k = 1; k < power; k++)\r\n                matrix = MatrixOperations.Multiply(matrix, matrix);\r\n        }\r\n        return matrix;\r\n    };\r\n    MatrixOperations.Binary = function (matrix) {\r\n        for (var i = 0; i < matrix.length; i++) {\r\n            for (var j = 0; j < matrix[i].length; j++) {\r\n                if (matrix[i][j] > 0) {\r\n                    matrix[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        return matrix;\r\n    };\r\n    return MatrixOperations;\r\n}());\r\nexports.MatrixOperations = MatrixOperations;\r\n//# sourceMappingURL=MatrixOperations.js.map"]},"metadata":{},"sourceType":"script"}