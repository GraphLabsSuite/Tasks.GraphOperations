import { Vertex } from "./Vertex";
import { UndirectedEdge } from "./UndirectedEdge";
import { Graph } from "./Graph";
import { IVertex } from "../types/IVertex";
import { IGraph } from "../types/IGraph";
import { IEdge } from "../types/IEdge";
/**
 * @classdesc
 * Undirected edge
 */
export declare class UndirectedGraph extends Graph<Vertex, UndirectedEdge> {
    /**
     * @constructor
     */
    constructor();
    /**
     * @override
     * Gets the edge by vertices incident to it
     * @param vertexOne
     * @param vertexTwo
     * @returns {DirectedEdge}
     */
    getEdge(vertexOne: IVertex, vertexTwo: IVertex): UndirectedEdge[];
    buildSCC(): IGraph<IVertex, IEdge>[];
    /**
     * Returns the minimal dominating sets of the graph
     * @returns {IVertex[][]}
     */
    buildMDS(): IVertex[][];
    /**
     * @override
     * Returns the copy of the graph
     * @returns {UndirectedGraph}
     */
    clone(): UndirectedGraph;
}
