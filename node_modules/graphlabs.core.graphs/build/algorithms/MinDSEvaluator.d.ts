import { IVertex } from "../types/IVertex";
import { UndirectedGraph } from "../main/UndirectedGraph";
/**
 * @classdesc
 * Minimal dominating sets evaluator
 */
export declare class MinDSEvaluator {
    /**
     * Minimal dominating sets
     */
    readonly _minDs: IVertex[][];
    /**
     * Checker for stopping recursion of unpromising branches
     */
    private readonly _delta;
    /**
     * Maximum level of the recursion
     */
    private readonly _n;
    /**
     * @constructor
     * @param graph
     */
    constructor(graph: UndirectedGraph);
    evaluate(graph: UndirectedGraph, flag: boolean): IVertex[][];
    /**
     * Checks whether there are vertices could not be covered by red vertex in this context
     * @param vertex
     * @param state
     * @returns {boolean}
     */
    private canVertexBeCovered;
    /**
     * Checks whether all vertices can be dominated by anyone
     * @param state
     * @returns {boolean}
     */
    private canVerticesBeCovered;
    private recountNDominated;
    private blueVertexRecount;
    private redVertexRecount;
    private process;
}
