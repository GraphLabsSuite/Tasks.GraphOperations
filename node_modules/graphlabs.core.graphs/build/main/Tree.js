"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var TreeNode = /** @class */ (function () {
    function TreeNode(node) {
        this.id = TreeNode.lastId++;
        this.label = node.label;
        this.weight = node.weight;
        this.children = node.children;
        this.position = node.position;
    }
    TreeNode.getInstance = function (node) {
        return new TreeNode(node);
    };
    TreeNode.prototype.getId = function () {
        return this.id;
    };
    TreeNode.prototype.getLabel = function () {
        return this.label;
    };
    TreeNode.prototype.getPosition = function () {
        if (this.position === void 0) {
            throw Error("Position wasn't specified");
        }
        return this.position;
    };
    TreeNode.prototype.setPosition = function (pos) {
        if (this.position === void 0) {
            this.position = pos;
        }
        if (pos.x !== this.position.x) {
            this.position.x = pos.x;
        }
        if (pos.y !== this.position.y) {
            this.position.y = pos.y;
        }
    };
    TreeNode.prototype.addLeaf = function (parentId, label, weigth) {
        var node = this.getNodeById(parentId);
        node.children.push(TreeNode.getInstance({
            label: label,
            weight: weigth,
            position: __assign({}, node.position),
            children: []
        }));
    };
    TreeNode.prototype.removeLeaf = function (nodeId) {
        var parentNode = this.deepNodeSearch(function (n) { return n.children.some(function (e) { return e.id === nodeId; }); });
        if (parentNode === void 0) {
            throw Error("Root cannot be removed.");
        }
        parentNode.children = parentNode.children.filter(function (e) { return e.id !== nodeId; });
    };
    TreeNode.prototype.getNodeById = function (id) {
        var node = this.deepNodeSearch(function (n) { return n.id === id; });
        if (node === void 0) {
            throw Error("No node found by specified id.");
        }
        return node;
    };
    TreeNode.prototype.getNodeList = function () {
        var childrenNodeList = this.children.map(function (e) { return e.getNodeList(); }).reduce(function (a, b) { return a.concat(b); }, []);
        var self = this;
        return [self].concat(childrenNodeList).sort(function (a, b) { return a.getId() - b.getId(); });
    };
    TreeNode.prototype.deepNodeSearch = function (predicate) {
        if (predicate(this)) {
            return this;
        }
        if (this.children.length > 0) {
            return this.children.map(function (e) { return e.deepNodeSearch(predicate); }).filter(function (e) { return e !== void 0; })[0];
        }
        return void 0;
    };
    TreeNode.lastId = 0;
    return TreeNode;
}());
exports.default = TreeNode;
//# sourceMappingURL=Tree.js.map