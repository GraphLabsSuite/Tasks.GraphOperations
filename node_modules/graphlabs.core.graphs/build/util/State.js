"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StateColor_1 = require("../enums/StateColor");
/**
 * State of the graph within recursion
 */
var State = /** @class */ (function () {
    /**
     * @constructor
     * Initialising parameters for the algorithm
     * @param graph
     * @param prototype
     */
    function State(graph, prototype) {
        var _this = this;
        if (graph != null) {
            this._verticesList = graph.vertices;
            this._tempDs = [];
            this._vertexColors = [];
            this._vertexDominatedNumber = [];
            this._vertexNeighbors = [];
            this._vertexPossibleDominatingNumber = [];
            this.level = 0;
            for (var _i = 0, _a = graph.vertices; _i < _a.length; _i++) {
                var vertex = _a[_i];
                this._vertexColors[vertex.id.idValue] = StateColor_1.StateColor.WHITE;
                this._vertexDominatedNumber[vertex.id.idValue] = 0;
                var tempNeighbors = [];
                for (var i = 0; i < graph.vertices.length; i++) {
                    if (graph.getEdge(graph.vertices[i], vertex) != null)
                        tempNeighbors.push(graph.vertices[i]);
                }
                this._vertexNeighbors[vertex.id.idValue] = tempNeighbors;
                this._vertexPossibleDominatingNumber[vertex.id.idValue] = tempNeighbors.length + 1;
            }
            this.nDominated = 0;
        }
        if (prototype != null) {
            this.level = prototype.level;
            this.nDominated = prototype.nDominated;
            this._tempDs = [];
            prototype._tempDs.forEach(function (ds) { return _this._tempDs.push(ds); });
            this._vertexColors = {};
            for (var key in prototype._vertexColors) {
                this._vertexColors[key] = prototype._vertexColors[key];
            }
            this._vertexNeighbors = {};
            for (var key in prototype._vertexNeighbors) {
                this._vertexNeighbors[key] = prototype._vertexNeighbors[key];
            }
            this._vertexDominatedNumber = {};
            for (var key in prototype._vertexDominatedNumber) {
                this._vertexDominatedNumber[key] = prototype._vertexDominatedNumber[key];
            }
            this._vertexPossibleDominatingNumber = {};
            for (var key in prototype._vertexPossibleDominatingNumber) {
                this._vertexPossibleDominatingNumber[key] = prototype._vertexPossibleDominatingNumber[key];
            }
        }
    }
    Object.defineProperty(State.prototype, "tempDs", {
        get: function () {
            return this._tempDs;
        },
        enumerable: true,
        configurable: true
    });
    State.prototype.vertexColor = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v))
                return _this._vertexColors[v.id.idValue];
        });
        return undefined; //If nothing has been found
    };
    State.prototype.setVertexColor = function (vertex, color) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v))
                _this._vertexColors[v.id.idValue] = color;
        });
    };
    State.prototype.vertexNeighbors = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v))
                return _this._vertexNeighbors[v.id.idValue];
        });
        return undefined;
    };
    State.prototype.vertexDominatedNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v))
                return _this._vertexDominatedNumber[v.id.idValue];
        });
        return undefined;
    };
    State.prototype.decrementVertexDominatedNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v)) {
                _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] - 1;
            }
        });
    };
    State.prototype.incrementVertexDominatedNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v)) {
                _this._vertexDominatedNumber[v.id.idValue] = _this._vertexDominatedNumber[v.id.idValue] + 1;
            }
        });
    };
    State.prototype.vertexDominatedNumberValues = function () {
        var result = [];
        for (var key in this._vertexDominatedNumber) {
            result.push(this._vertexDominatedNumber[key]);
        }
        return result;
    };
    State.prototype.vertexPossibleDominatingNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v))
                return _this._vertexPossibleDominatingNumber[v.id.idValue];
        });
        return undefined;
    };
    State.prototype.vertexPossibleDominatingNumberValues = function () {
        var result = [];
        for (var key in this._vertexPossibleDominatingNumber) {
            result.push(this._vertexPossibleDominatingNumber[key]);
        }
        return result;
    };
    State.prototype.decrementVertexPossibleDominatingNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v)) {
                _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] - 1;
            }
        });
    };
    State.prototype.incrementVertexPossibleDominatingNumber = function (vertex) {
        var _this = this;
        this._verticesList.forEach(function (v) {
            if (vertex.equals(v)) {
                _this._vertexPossibleDominatingNumber[v.id.idValue] = _this._vertexPossibleDominatingNumber[v.id.idValue] + 1;
            }
        });
    };
    /**
     * Clones the state for the recursion process
     * @returns {State}
     */
    State.prototype.clone = function () {
        return new State(null, this);
    };
    return State;
}());
exports.State = State;
//# sourceMappingURL=State.js.map