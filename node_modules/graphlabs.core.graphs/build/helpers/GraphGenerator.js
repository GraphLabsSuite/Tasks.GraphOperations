"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vertex_1 = require("../main/Vertex");
var Edge_1 = require("../main/Edge");
var Graph_1 = require("../main/Graph");
/**
 * Graph generator
 */
var GraphGenerator = /** @class */ (function () {
    function GraphGenerator() {
    }
    GraphGenerator.generateVertexNumber = function (max) {
        return Math.floor(Math.random() * max) + 1;
    };
    GraphGenerator.generateEdgesNumber = function (verticeNumber) {
        return Math.floor(Math.random() * verticeNumber * (verticeNumber - 1) / 2) + 1;
    };
    /**
     * Returns the generated graph with exact vertex number
     * @param verticeNumber
     * @returns {IGraph}
     */
    GraphGenerator.generate = function (verticeNumber) {
        if (verticeNumber == null) {
            var verticeNumberGen = GraphGenerator.generateVertexNumber(10);
            return GraphGenerator.generate(verticeNumberGen);
        }
        var graph = new Graph_1.Graph();
        for (var i = 0; i < verticeNumber; i++) {
            graph.addVertex(new Vertex_1.Vertex(i.toString(), graph));
        }
        if (verticeNumber > 2) {
            var edgeNumber = GraphGenerator.generateVertexNumber(graph.vertices.length);
            for (var i = 0; i < edgeNumber; i++) {
                var vertexOne = undefined;
                var vertexTwo = undefined;
                var flag1 = void 0;
                var flag2 = void 0;
                var flag3 = void 0;
                var flag4 = void 0;
                var flag5 = void 0;
                do {
                    var vertexOneNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);
                    var vertexTwoNumber = GraphGenerator.generateVertexNumber(graph.vertices.length - 1);
                    vertexOne = graph.getVertex(vertexOneNumber.toString())[0];
                    vertexTwo = graph.getVertex(vertexTwoNumber.toString())[0];
                    flag1 = vertexOne === undefined;
                    flag2 = vertexTwo === undefined;
                    flag3 = vertexOne == vertexTwo;
                    flag4 = graph.getEdge(vertexOne, vertexTwo).length != 0;
                    flag5 = graph.getEdge(vertexTwo, vertexOne).length != 0;
                } while (flag1 || flag2
                    || flag3
                    || flag4
                    || flag5);
                graph.addEdge(new Edge_1.Edge(vertexOne, vertexTwo));
            }
        }
        else if (verticeNumber === 2) {
            var validator = this.generateVertexNumber(20);
            if (validator % 2 == 0)
                graph.addEdge(new Edge_1.Edge(graph.vertices[0], graph.vertices[1]));
        }
        else if (verticeNumber === 1) {
            // pass
        }
        else if (verticeNumber === 0) {
            // pass
        }
        return graph;
    };
    GraphGenerator.generateUndirectedGraph = function () {
        return GraphGenerator.generate();
    };
    GraphGenerator.generateDirectedGraph = function () {
        return GraphGenerator.generate();
    };
    return GraphGenerator;
}());
exports.GraphGenerator = GraphGenerator;
//# sourceMappingURL=GraphGenerator.js.map