{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar VertexToJSONConverter_1 = require(\"./VertexToJSONConverter\");\n\nvar DirectedEdge_1 = require(\"../main/DirectedEdge\");\n\nvar UndirectedEdge_1 = require(\"../main/UndirectedEdge\");\n\nvar EdgeToJSONConverter =\n/** @class */\nfunction () {\n  function EdgeToJSONConverter() {}\n\n  EdgeToJSONConverter.convert = function (edge) {\n    return {\n      vertexOne: VertexToJSONConverter_1.VertexToJSONConverter.convert(edge.vertexOne),\n      vertexTwo: VertexToJSONConverter_1.VertexToJSONConverter.convert(edge.vertexTwo),\n      isDirected: edge.isDirected\n    };\n  }; //TODO: Think about ID in the new created edges (Vertices are created twice)\n\n\n  EdgeToJSONConverter.convertBack = function (edge, graph) {\n    var vertexOne = graph.getVertex(edge.vertexOne.name)[0];\n    var vertexTwo = graph.getVertex(edge.vertexTwo.name)[0];\n    return edge.isDirected ? new DirectedEdge_1.DirectedEdge(vertexOne, vertexTwo) : new UndirectedEdge_1.UndirectedEdge(vertexOne, vertexTwo);\n  };\n\n  return EdgeToJSONConverter;\n}();\n\nexports.EdgeToJSONConverter = EdgeToJSONConverter;","map":{"version":3,"sources":["../../src/serializers/EdgeToJSONConverter.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAKA,IAAA,mBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CAiBC;;AAhBiB,EAAA,mBAAA,CAAA,OAAA,GAAd,UAAsB,IAAtB,EAAiC;AAC7B,WAAO;AACH,MAAA,SAAS,EAAE,uBAAA,CAAA,qBAAA,CAAsB,OAAtB,CAA8B,IAAI,CAAC,SAAnC,CADR;AAEH,MAAA,SAAS,EAAE,uBAAA,CAAA,qBAAA,CAAsB,OAAtB,CAA8B,IAAI,CAAC,SAAnC,CAFR;AAGH,MAAA,UAAU,EAAE,IAAI,CAAC;AAHd,KAAP;AAKH,GANa,CADlB,CASI;;;AACc,EAAA,mBAAA,CAAA,WAAA,GAAd,UAA0B,IAA1B,EAA0C,KAA1C,EAAuE;AACnE,QAAM,SAAS,GAAG,KAAK,CAAC,SAAN,CAAgB,IAAI,CAAC,SAAL,CAAe,IAA/B,EAAqC,CAArC,CAAlB;AACA,QAAM,SAAS,GAAG,KAAK,CAAC,SAAN,CAAgB,IAAI,CAAC,SAAL,CAAe,IAA/B,EAAqC,CAArC,CAAlB;AACA,WAAQ,IAAI,CAAC,UAAN,GACH,IAAI,cAAA,CAAA,YAAJ,CAAiB,SAAjB,EAA4B,SAA5B,CADG,GAEH,IAAI,gBAAA,CAAA,cAAJ,CAAmB,SAAnB,EAA8B,SAA9B,CAFJ;AAGH,GANa;;AAOlB,SAAA,mBAAA;AAAC,CAjBD,EAAA;;AAAa,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar VertexToJSONConverter_1 = require(\"./VertexToJSONConverter\");\r\nvar DirectedEdge_1 = require(\"../main/DirectedEdge\");\r\nvar UndirectedEdge_1 = require(\"../main/UndirectedEdge\");\r\nvar EdgeToJSONConverter = /** @class */ (function () {\r\n    function EdgeToJSONConverter() {\r\n    }\r\n    EdgeToJSONConverter.convert = function (edge) {\r\n        return {\r\n            vertexOne: VertexToJSONConverter_1.VertexToJSONConverter.convert(edge.vertexOne),\r\n            vertexTwo: VertexToJSONConverter_1.VertexToJSONConverter.convert(edge.vertexTwo),\r\n            isDirected: edge.isDirected\r\n        };\r\n    };\r\n    //TODO: Think about ID in the new created edges (Vertices are created twice)\r\n    EdgeToJSONConverter.convertBack = function (edge, graph) {\r\n        var vertexOne = graph.getVertex(edge.vertexOne.name)[0];\r\n        var vertexTwo = graph.getVertex(edge.vertexTwo.name)[0];\r\n        return (edge.isDirected) ?\r\n            new DirectedEdge_1.DirectedEdge(vertexOne, vertexTwo) :\r\n            new UndirectedEdge_1.UndirectedEdge(vertexOne, vertexTwo);\r\n    };\r\n    return EdgeToJSONConverter;\r\n}());\r\nexports.EdgeToJSONConverter = EdgeToJSONConverter;\r\n//# sourceMappingURL=EdgeToJSONConverter.js.map"]},"metadata":{},"sourceType":"script"}