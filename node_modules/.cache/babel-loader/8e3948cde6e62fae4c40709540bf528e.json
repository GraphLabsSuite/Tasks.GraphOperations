{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Checker of the two graphs isomorphism\r\n */\n\nvar IsomorphismChecker =\n/** @class */\nfunction () {\n  function IsomorphismChecker() {} //Not sure this is the right way to emulate generators working\n\n\n  IsomorphismChecker.permute = function (vertices, pre) {\n    if (pre === void 0) {\n      pre = [];\n    }\n\n    var result = [];\n    if (vertices.length == 0) return pre;\n\n    var _loop_1 = function (i) {\n      var tmp_vertices = [];\n      vertices.forEach(function (v) {\n        if (!v.equals(vertices[i])) tmp_vertices.push(v);\n      });\n      var tmpParams = [];\n      pre.forEach(function (v) {\n        return tmpParams.push(v);\n      });\n      tmpParams.push([vertices[i]]);\n\n      for (var _i = 0, _a = this_1.permute(tmp_vertices, tmpParams); _i < _a.length; _i++) {\n        var y = _a[_i];\n        result.push(y);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < vertices.length; i++) {\n      _loop_1(i);\n    }\n\n    return result;\n  };\n\n  IsomorphismChecker.updateBijection = function (verticesOne, verticesTwo) {\n    IsomorphismChecker.bijection = {};\n    verticesTwo.forEach(function (a) {\n      verticesOne.map(function (b) {\n        IsomorphismChecker.bijection[a.name] = b.name;\n      });\n    });\n  };\n\n  IsomorphismChecker.compareHelper = function (vertexOne, vertexTwo) {\n    return vertexOne.name == IsomorphismChecker.bijection[vertexTwo.name];\n  };\n\n  IsomorphismChecker.directCompare = function (graphOne, graphTwo) {\n    var equals = 0;\n    var count = graphOne.edges.length;\n\n    for (var i = 0; i < count; i++) for (var j = 0; j < count; j++) if (IsomorphismChecker.compareHelper(graphOne.edges[i].vertexOne, graphTwo.edges[j].vertexOne) && IsomorphismChecker.compareHelper(graphOne.edges[i].vertexTwo, graphTwo.edges[j].vertexTwo) || IsomorphismChecker.compareHelper(graphOne.edges[i].vertexTwo, graphTwo.edges[j].vertexOne) && IsomorphismChecker.compareHelper(graphOne.edges[i].vertexOne, graphTwo.edges[j].vertexTwo)) {\n      equals++;\n      break;\n    }\n\n    return equals == count;\n  };\n\n  IsomorphismChecker.checkIsomorphism = function (graphOne, graphTwo) {\n    if (graphOne.vertices.length != graphTwo.vertices.length || graphOne.edges.length != graphTwo.edges.length) return false;\n    IsomorphismChecker.permute(graphOne.vertices).forEach(function (perm) {\n      IsomorphismChecker.updateBijection(perm, graphTwo.vertices);\n      if (IsomorphismChecker.directCompare(graphOne, graphTwo)) return true;\n    });\n    return false;\n  };\n\n  return IsomorphismChecker;\n}();\n\nexports.IsomorphismChecker = IsomorphismChecker;","map":{"version":3,"sources":["../../src/algorithms/IsomorphismChecker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Checker of the two graphs isomorphism\r\n */\r\nvar IsomorphismChecker = /** @class */ (function () {\r\n    function IsomorphismChecker() {\r\n    }\r\n    //Not sure this is the right way to emulate generators working\r\n    IsomorphismChecker.permute = function (vertices, pre) {\r\n        if (pre === void 0) { pre = []; }\r\n        var result = [];\r\n        if (vertices.length == 0)\r\n            return pre;\r\n        var _loop_1 = function (i) {\r\n            var tmp_vertices = [];\r\n            vertices.forEach(function (v) {\r\n                if (!v.equals(vertices[i]))\r\n                    tmp_vertices.push(v);\r\n            });\r\n            var tmpParams = [];\r\n            pre.forEach(function (v) { return tmpParams.push(v); });\r\n            tmpParams.push([vertices[i]]);\r\n            for (var _i = 0, _a = this_1.permute(tmp_vertices, tmpParams); _i < _a.length; _i++) {\r\n                var y = _a[_i];\r\n                result.push(y);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return result;\r\n    };\r\n    IsomorphismChecker.updateBijection = function (verticesOne, verticesTwo) {\r\n        IsomorphismChecker.bijection = {};\r\n        verticesTwo.forEach(function (a) {\r\n            verticesOne.map(function (b) {\r\n                IsomorphismChecker.bijection[a.name] = b.name;\r\n            });\r\n        });\r\n    };\r\n    IsomorphismChecker.compareHelper = function (vertexOne, vertexTwo) {\r\n        return vertexOne.name == IsomorphismChecker.bijection[vertexTwo.name];\r\n    };\r\n    IsomorphismChecker.directCompare = function (graphOne, graphTwo) {\r\n        var equals = 0;\r\n        var count = graphOne.edges.length;\r\n        for (var i = 0; i < count; i++)\r\n            for (var j = 0; j < count; j++)\r\n                if (IsomorphismChecker.compareHelper(graphOne.edges[i].vertexOne, graphTwo.edges[j].vertexOne) &&\r\n                    IsomorphismChecker.compareHelper(graphOne.edges[i].vertexTwo, graphTwo.edges[j].vertexTwo) ||\r\n                    (IsomorphismChecker.compareHelper(graphOne.edges[i].vertexTwo, graphTwo.edges[j].vertexOne) &&\r\n                        IsomorphismChecker.compareHelper(graphOne.edges[i].vertexOne, graphTwo.edges[j].vertexTwo))) {\r\n                    equals++;\r\n                    break;\r\n                }\r\n        return equals == count;\r\n    };\r\n    IsomorphismChecker.checkIsomorphism = function (graphOne, graphTwo) {\r\n        if (graphOne.vertices.length != graphTwo.vertices.length || graphOne.edges.length != graphTwo.edges.length)\r\n            return false;\r\n        IsomorphismChecker.permute(graphOne.vertices).forEach(function (perm) {\r\n            IsomorphismChecker.updateBijection(perm, graphTwo.vertices);\r\n            if (IsomorphismChecker.directCompare(graphOne, graphTwo))\r\n                return true;\r\n        });\r\n        return false;\r\n    };\r\n    return IsomorphismChecker;\r\n}());\r\nexports.IsomorphismChecker = IsomorphismChecker;\r\n//# sourceMappingURL=IsomorphismChecker.js.map"]},"metadata":{},"sourceType":"script"}